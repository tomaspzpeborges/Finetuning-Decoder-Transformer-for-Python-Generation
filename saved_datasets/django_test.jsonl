{"intent": "params is an empty list,", "snippet": "params = [ ]"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "params is a list with second element of source as a element.", "snippet": "params = [ source [ 1 ] ]"}
{"intent": "return a list containing first element of source and a list containing params.", "snippet": "return [ source [ 0 ] ] , [ params ]"}
{"intent": "result is a list containing an empty string.", "snippet": "result = [ '' ]"}
{"intent": "result_args is a list containing an empty list.", "snippet": "result_args = [ [ ] ]"}
{"intent": "pos and last are integer 0.", "snippet": "pos = last = 0"}
{"intent": "for every pos and elt in enumerated iterable source,", "snippet": "for pos , elt in enumerate ( source ) :"}
{"intent": "if elt is an instance of six.string_types class,", "snippet": "if isinstance ( elt , six . string_types ) :"}
{"intent": "skip this loop iteration.", "snippet": "continue"}
{"intent": "join source list elements from last till pos indexes into a string, substitute the result for piece.", "snippet": "piece = '' . join ( source [ last : pos ] )"}
{"intent": "if elt is an instance of Group class,", "snippet": "if isinstance ( elt , Group ) :"}
{"intent": "increment piece by firs element of elt.", "snippet": "piece += elt [ 0 ]"}
{"intent": "substitute second element of elt for param.", "snippet": "param = elt [ 1 ]"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "param is None.", "snippet": "param = None"}
{"intent": "increment pos by one, substitute the result for last.", "snippet": "last = pos + 1"}
{"intent": "for every i in range of integers from 0 to length of result, not included,", "snippet": "for i in range ( len ( result ) ) :"}
{"intent": "increment i-th element of result by piece.", "snippet": "result [ i ] += piece"}
{"intent": "if param is true,", "snippet": "if param :"}
{"intent": "append param to i-th element of result_args.", "snippet": "result_args [ i ] . append ( param )"}
{"intent": "if elt is an instance of Choice or NonCapture classes,", "snippet": "if isinstance ( elt , ( Choice , NonCapture ) ) :"}
{"intent": "if elt is an instance of NonCapture class,", "snippet": "if isinstance ( elt , NonCapture ) :"}
{"intent": "elt is an list with an element elt.", "snippet": "elt = [ elt ]"}
{"intent": "inner_result and inner_args are empty lists.", "snippet": "inner_result , inner_args = [ ] , [ ]"}
{"intent": "for every item in elt,", "snippet": "for item in elt :"}
{"intent": "call the function flatten_result with an argument item, assign the result to res and args, respectively.", "snippet": "res , args = flatten_result ( item )"}
{"intent": "extend list inner_result with res.", "snippet": "inner_result . extend ( res )"}
{"intent": "extend list inner_args with args.", "snippet": "inner_args . extend ( args )"}
{"intent": "new_result is an empty list.", "snippet": "new_result = [ ]"}
{"intent": "new_args is an empty list.", "snippet": "new_args = [ ]"}
{"intent": "zip elements of result and result_args into a list of tuples, for every item and args in the result,", "snippet": "for item , args in zip ( result , result_args ) :"}
{"intent": "zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,", "snippet": "for i_item , i_args in zip ( inner_result , inner_args ) :"}
{"intent": "sum item and i_item together, append the result to new_result.", "snippet": "new_result . append ( item + i_item )"}
{"intent": "append i_args to args, append new_args with the result.", "snippet": "new_args . append ( args [ : ] + i_args )"}
{"intent": "substitute new_result for result.", "snippet": "result = new_result"}
{"intent": "substitute new_args for result_args.", "snippet": "result_args = new_args"}
{"intent": "if pos is greater than or equal to last,", "snippet": "if pos >= last :"}
{"intent": "join elements of list source from index last to the end into a string, substitute it for piece.", "snippet": "piece = '' . join ( source [ last : ] )"}
{"intent": "for every i in range of integers from 0 to length of result, not included,", "snippet": "for i in range ( len ( result ) ) :"}
{"intent": "increment i-th element of result by piece.", "snippet": "result [ i ] += piece"}
{"intent": "return result and result_args.", "snippet": "return result , result_args"}
{"intent": "from django.utils.functional import curry and Promise into default name space.", "snippet": "from django . utils . functional import curry , Promise"}
{"intent": "from django.utils import six into default name space.", "snippet": "from django . utils import six"}
{"intent": "derive the class EscapeData from object base class.", "snippet": "class EscapeData ( object ) :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "derive the class EscapeBytes from bytes and EscapeData base classes.", "snippet": "class EscapeBytes ( bytes , EscapeData ) :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "derive the class EscapeText from six.text_type and EscapeData base classes.", "snippet": "class EscapeText ( six . text_type , EscapeData ) :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "if six.PY3 is true,", "snippet": "if six . PY3 :"}
{"intent": "substitute EscapeText for EscapeString.", "snippet": "EscapeString = EscapeText"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute EscapeBytes for EscapeString.", "snippet": "EscapeString = EscapeBytes"}
{"intent": "substitute EscapeText for EscapeUnicode.", "snippet": "EscapeUnicode = EscapeText"}
{"intent": "derive the class SafeData from object base class.", "snippet": "class SafeData ( object ) :"}
{"intent": "define the method __html__ with an argument self.", "snippet": "def __html__ ( self ) :"}
{"intent": "return self.", "snippet": "return self"}
{"intent": "derive the class SafeBytes from bytes and SafeData base classes.", "snippet": "class SafeBytes ( bytes , SafeData ) :"}
{"intent": "define the method __add__ with 2 arguments self and rhs.", "snippet": "def __add__ ( self , rhs ) :"}
{"intent": "call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.", "snippet": "t = super ( SafeBytes , self ) . __add__ ( rhs )"}
{"intent": "if rhs is an instance of SafeText,", "snippet": "if isinstance ( rhs , SafeText ) :"}
{"intent": "return an instance of SafeText, created with an argument t.", "snippet": "return SafeText ( t )"}
{"intent": "otherwise if rhs is an instance of SafeBytes,", "snippet": "elif isinstance ( rhs , SafeBytes ) :"}
{"intent": "return an instance of SafeBytes, created with an argument t.", "snippet": "return SafeBytes ( t )"}
{"intent": "return t.", "snippet": "return t"}
{"intent": "define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.", "snippet": "def _proxy_method ( self , * args , ** kwargs ) :"}
{"intent": "remove kwargs dictionary element under the 'method' key, substitute it for method.", "snippet": "method = kwargs . pop ( 'method' )"}
{"intent": "call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.", "snippet": "data = method ( self , * args , ** kwargs )"}
{"intent": "if data is an instance of bytes,", "snippet": "if isinstance ( data , bytes ) :"}
{"intent": "return an instance of SafeBytes, created with an argument data.", "snippet": "return SafeBytes ( data )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "return an instance of SafeText, created with an argument data.", "snippet": "return SafeText ( data )"}
{"intent": "call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.", "snippet": "decode = curry ( _proxy_method , method = bytes . decode )"}
{"intent": "derive the class SafeText from six.text_type and SafeData base classes.", "snippet": "class SafeText ( six . text_type , SafeData ) :"}
{"intent": "define the method __add__ with 2 arguments self and rhs.", "snippet": "def __add__ ( self , rhs ) :"}
{"intent": "call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.", "snippet": "t = super ( SafeText , self ) . __add__ ( rhs )"}
{"intent": "if rhs is an instance of SafeData.", "snippet": "if isinstance ( rhs , SafeData ) :"}
{"intent": "return an instance of SafeText, created with an argument t.", "snippet": "return SafeText ( t )"}
{"intent": "return t.", "snippet": "return t"}
{"intent": "define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.", "snippet": "def _proxy_method ( self , * args , ** kwargs ) :"}
{"intent": "remove kwargs dictionary element under the 'method' key, substitute it for method.", "snippet": "method = kwargs . pop ( 'method' )"}
{"intent": "call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.", "snippet": "data = method ( self , * args , ** kwargs )"}
{"intent": "if data is an instance of bytes.", "snippet": "if isinstance ( data , bytes ) :"}
{"intent": "return an instance of SafeBytes, created with an argument data.", "snippet": "return SafeBytes ( data )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "return an instance of SafeText, created with an argument data.", "snippet": "return SafeText ( data )"}
{"intent": "call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.", "snippet": "encode = curry ( _proxy_method , method = six . text_type . encode )"}
{"intent": "if six.PY3 is true,", "snippet": "if six . PY3 :"}
{"intent": "substitute SafeText for SafeString.", "snippet": "SafeString = SafeText"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute SafeBytes for SafeString.", "snippet": "SafeString = SafeBytes"}
{"intent": "substitute SafeText for SafeUnicode.", "snippet": "SafeUnicode = SafeText"}
{"intent": "define the function mark_safe with an argument s.", "snippet": "def mark_safe ( s ) :"}
{"intent": "if s is an instance of SafeData.", "snippet": "if isinstance ( s , SafeData ) :"}
{"intent": "return s.", "snippet": "return s"}
{"intent": "if s is an instance of bytes or Promise and s._delegate_bytes is true,", "snippet": "if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :"}
{"intent": "return an instance of SafeBytes, created with an argument s.", "snippet": "return SafeBytes ( s )"}
{"intent": "if s is an instance of six.text_type or Promise,", "snippet": "if isinstance ( s , ( six . text_type , Promise ) ) :"}
{"intent": "return an instance of SafeText, created with an argument s.", "snippet": "return SafeText ( s )"}
{"intent": "return an instance of SafeText, created with an argument s converted into a string.", "snippet": "return SafeString ( str ( s ) )"}
{"intent": "define the function mark_for_escaping with an argument s.", "snippet": "def mark_for_escaping ( s ) :"}
{"intent": "if s is an instance of SafeData or EscapeData,", "snippet": "if isinstance ( s , ( SafeData , EscapeData ) ) :"}
{"intent": "return s.", "snippet": "return s"}
{"intent": "if s is an instance of bytes or Promise and s._delegate_bytes is true,", "snippet": "if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :"}
{"intent": "return an instance of EscapeBytes, created with an argument s.", "snippet": "return EscapeBytes ( s )"}
{"intent": "if s is an instance of six.text_type or Promise,", "snippet": "if isinstance ( s , ( six . text_type , Promise ) ) :"}
{"intent": "return an instance of EscapeText, created with an argument s.", "snippet": "return EscapeText ( s )"}
{"intent": "return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.", "snippet": "return EscapeBytes ( bytes ( s ) )"}
{"intent": "import module opera.", "snippet": "import operator"}
{"intent": "import module sys.", "snippet": "import sys"}
{"intent": "import module types.", "snippet": "import types"}
{"intent": "__author__ is a string 'Benjamin Peterson <benjamin@python.org>'.", "snippet": "__author__ = 'Benjamin Peterson <benjamin@python.org>'"}
{"intent": "__version__ is a string '1.6.1'.", "snippet": "__version__ = '1.6.1'"}
{"intent": "if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.", "snippet": "PY2 = sys . version_info [ 0 ] == 2"}
{"intent": "if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.", "snippet": "PY3 = sys . version_info [ 0 ] == 3"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "substitute str for string_types.", "snippet": "string_types = str ,"}
{"intent": "substitute int for integer_types.", "snippet": "integer_types = int ,"}
{"intent": "substitute type for class_types.", "snippet": "class_types = type ,"}
{"intent": "substitute str for text_type.", "snippet": "text_type = str"}
{"intent": "substitute bytes for binary_type.", "snippet": "binary_type = bytes"}
{"intent": "substitute sys.maxsize for MAXSIZE.", "snippet": "MAXSIZE = sys . maxsize"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute basestring for string_types.", "snippet": "string_types = basestring ,"}
{"intent": "integer_types is a tuple with 2 elements int and long.", "snippet": "integer_types = ( int , long )"}
{"intent": "class_types is a tuple with 2 elements: type and types.ClassType.", "snippet": "class_types = ( type , types . ClassType )"}
{"intent": "substitute unicode for text_type.", "snippet": "text_type = unicode"}
{"intent": "substitute str for binary_type.", "snippet": "binary_type = str"}
{"intent": "if sys.platform starts with string 'java',", "snippet": "if sys . platform . startswith ( 'java' ) :"}
{"intent": "bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.", "snippet": "MAXSIZE = int ( ( 1 << 31 ) - 1 )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "derive class X from the object base class.", "snippet": "class X ( object ) :"}
{"intent": "define the method __len__ with an argument self.", "snippet": "def __len__ ( self ) :"}
{"intent": "bitwise shift integer 1 to the left by 31 spaces, return the result.", "snippet": "return 1 << 31"}
{"intent": "try", "snippet": "try :"}
{"intent": "instantiate class X, get its length.", "snippet": "len ( X ( ) )"}
{"intent": "if OverflowError exception is caught,", "snippet": "except OverflowError :"}
{"intent": "bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.", "snippet": "MAXSIZE = int ( ( 1 << 31 ) - 1 )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.", "snippet": "MAXSIZE = int ( ( 1 << 63 ) - 1 )"}
{"intent": "delete X.", "snippet": "del X"}
{"intent": "define the function _add_doc with 2 arguments: func and doc.", "snippet": "def _add_doc ( func , doc ) :"}
{"intent": "substitute doc for func.__doc__.", "snippet": "func . __doc__ = doc"}
{"intent": "define the function _import_module with an argument name.", "snippet": "def _import_module ( name ) :"}
{"intent": "call the function __import__ with an argument name.", "snippet": "__import__ ( name )"}
{"intent": "return value under the name key of the sys.modules dictionary.", "snippet": "return sys . modules [ name ]"}
{"intent": "derive class _LazyDescr from the object base class.", "snippet": "class _LazyDescr ( object ) :"}
{"intent": "define the method __init__ with 2 arguments: self and name.", "snippet": "def __init__ ( self , name ) :"}
{"intent": "substitute name for self.name.", "snippet": "self . name = name"}
{"intent": "define the method __get__ with 3 arguments: self, obj and tp.", "snippet": "def __get__ ( self , obj , tp ) :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the method self._resolve, substitute the result for result.", "snippet": "result = self . _resolve ( )"}
{"intent": "if ImportError exception is caught,", "snippet": "except ImportError :"}
{"intent": "raise an AttributeError with an argument string '%s could not be imported ', formated with self.name.", "snippet": "raise AttributeError ( '%s could not be imported ' % self . name )"}
{"intent": "set self.name attribute of the obj object to result.", "snippet": "setattr ( obj , self . name , result )"}
{"intent": "delete self.name attribute from the obj.__class__ object.", "snippet": "delattr ( obj . __class__ , self . name )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "derive class MovedModule from the _LazyDescr base class.", "snippet": "class MovedModule ( _LazyDescr ) :"}
{"intent": "define the method __init__ with 4 arguments: self, name, old and new set to None.", "snippet": "def __init__ ( self , name , old , new = None ) :"}
{"intent": "call the __init__ method with an argument name from the base class of the MovedModule class.", "snippet": "super ( MovedModule , self ) . __init__ ( name )"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "if new is None,", "snippet": "if new is None :"}
{"intent": "substitute name for new.", "snippet": "new = name"}
{"intent": "substitute new for self.mod.", "snippet": "self . mod = new"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute old for self.mod.", "snippet": "self . mod = old"}
{"intent": "define the method _resolve with an argument self.", "snippet": "def _resolve ( self ) :"}
{"intent": "call the function _import_module with an argument self.mod, return the result.", "snippet": "return _import_module ( self . mod )"}
{"intent": "define the method __getattr__ with 2 arguments: self and attr set to None.", "snippet": "def __getattr__ ( self , attr ) :"}
{"intent": "if attr equals any of the strings '__file__', '__name__' or '__path__' and self.mod is not contained in sys.modules,", "snippet": "if ( attr in ( '__file__' , '__name__' , '__path__' ) and  self . mod not in sys . modules ) :"}
{"intent": "raise an AttributeError with an argument attr.", "snippet": "raise AttributeError ( attr )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the method self._resolve, substitute the result for _module.", "snippet": "_module = self . _resolve ( )"}
{"intent": "if ImportError exception is caught,", "snippet": "except ImportError :"}
{"intent": "raise an AttributeError with an argument attr.", "snippet": "raise AttributeError ( attr )"}
{"intent": "get attr attribute from the _module object, substitute it for value.", "snippet": "value = getattr ( _module , attr )"}
{"intent": "set attr attribute of the self object to value.", "snippet": "setattr ( self , attr , value )"}
{"intent": "return value.", "snippet": "return value"}
{"intent": "derive class _LazyModule from the types.ModuleType base class.", "snippet": "class _LazyModule ( types . ModuleType ) :"}
{"intent": "define the method __init__ with 2 arguments: self and name.", "snippet": "def __init__ ( self , name ) :"}
{"intent": "call the method __init__ with an argument name form the base class of the class _LazyModule.", "snippet": "super ( _LazyModule , self ) . __init__ ( name )"}
{"intent": "substitute self.__class__.__doc__ for self.__doc__.", "snippet": "self . __doc__ = self . __class__ . __doc__"}
{"intent": "define the method __dir__ with an argument self.", "snippet": "def __dir__ ( self ) :"}
{"intent": "attrs is a list with 2 elements: strings '__doc__' and '__name__'.", "snippet": "attrs = [ '__doc__' , '__name__' ]"}
{"intent": "append attr.name to attrs for every attr in self._moved_attributes.", "snippet": "attrs += [ attr . name for attr in self . _moved_attributes ]"}
{"intent": "return attrs.", "snippet": "return attrs"}
{"intent": "_moved_attributes is an empty list.", "snippet": "_moved_attributes = [ ]"}
{"intent": "derive class MovedAttribute from the _LazyDescr base class.", "snippet": "class MovedAttribute ( _LazyDescr ) :"}
{"intent": "define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.", "snippet": "def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :"}
{"intent": "call the method __init__ with an argument name form the base class of the class MovedAttribute.", "snippet": "super ( MovedAttribute , self ) . __init__ ( name )"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "if new_mod is None,", "snippet": "if new_mod is None :"}
{"intent": "substitute name for new_mod.", "snippet": "new_mod = name"}
{"intent": "substitute new_mod for self.mod.", "snippet": "self . mod = new_mod"}
{"intent": "if new_attr is None,", "snippet": "if new_attr is None :"}
{"intent": "if old_attr is None,", "snippet": "if old_attr is None :"}
{"intent": "substitute name for new_attr.", "snippet": "new_attr = name"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute old_attr for new_attr.", "snippet": "new_attr = old_attr"}
{"intent": "substitute new_attr for self.attr.", "snippet": "self . attr = new_attr"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute old_mod for self.mod.", "snippet": "self . mod = old_mod"}
{"intent": "if old_attr is None,", "snippet": "if old_attr is None :"}
{"intent": "substitute name for old_attr.", "snippet": "old_attr = name"}
{"intent": "substitute old_attr for self.attr.", "snippet": "self . attr = old_attr"}
{"intent": "define the method _resolve with an argument self.", "snippet": "def _resolve ( self ) :"}
{"intent": "call the function _import_module with an argument self.mod, substitute the result for module.", "snippet": "module = _import_module ( self . mod )"}
{"intent": "gett self.attr from the module object, return it.", "snippet": "return getattr ( module , self . attr )"}
{"intent": "derive class _MovedItems from the _LazyModule base class.", "snippet": "class _MovedItems ( _LazyModule ) :"}
{"intent": "_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,", "snippet": "_moved_attributes = [  MovedAttribute ( 'cStringIO' , 'cStringIO' , 'io' , 'StringIO' ) ,  MovedAttribute ( 'filter' , 'itertools' , 'builtins' , 'ifilter' , 'filter' ) ,  MovedAttribute ( 'filterfalse' , 'itertools' , 'itertools' , 'ifilterfalse' , 'filterfalse' ) ,  MovedAttribute ( 'input' , '__builtin__' , 'builtins' , 'raw_input' , 'input' ) ,  MovedAttribute ( 'map' , 'itertools' , 'builtins' , 'imap' , 'map' ) ,  MovedAttribute ( 'range' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) ,  MovedAttribute ( 'reload_module' , '__builtin__' , 'imp' , 'reload' ) ,  MovedAttribute ( 'reduce' , '__builtin__' , 'functools' ) ,  MovedAttribute ( 'StringIO' , 'StringIO' , 'io' ) ,  MovedAttribute ( 'UserString' , 'UserString' , 'collections' ) ,  MovedAttribute ( 'xrange' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) ,  MovedAttribute ( 'zip' , 'itertools' , 'builtins' , 'izip' , 'zip' ) ,  MovedAttribute ( 'zip_longest' , 'itertools' , 'itertools' , 'izip_longest' , 'zip_longest' ) ,   MovedModule ( 'builtins' , '__builtin__' ) ,  MovedModule ( 'configparser' , 'ConfigParser' ) ,  MovedModule ( 'copyreg' , 'copy_reg' ) ,  MovedModule ( 'dbm_gnu' , 'gdbm' , 'dbm.gnu' ) ,  MovedModule ( 'http_cookiejar' , 'cookielib' , 'http.cookiejar' ) ,  MovedModule ( 'http_cookies' , 'Cookie' , 'http.cookies' ) ,  MovedModule ( 'html_entities' , 'htmlentitydefs' , 'html.entities' ) ,  MovedModule ( 'html_parser' , 'HTMLParser' , 'html.parser' ) ,  MovedModule ( 'http_client' , 'httplib' , 'http.client' ) ,  MovedModule ( 'email_mime_multipart' , 'email.MIMEMultipart' , 'email.mime.multipart' ) ,  MovedModule ( 'email_mime_text' , 'email.MIMEText' , 'email.mime.text' ) ,  MovedModule ( 'email_mime_base' , 'email.MIMEBase' , 'email.mime.base' ) ,  MovedModule ( 'BaseHTTPServer' , 'BaseHTTPServer' , 'http.server' ) ,  MovedModule ( 'CGIHTTPServer' , 'CGIHTTPServer' , 'http.server' ) ,  MovedModule ( 'SimpleHTTPServer' , 'SimpleHTTPServer' , 'http.server' ) ,  MovedModule ( 'cPickle' , 'cPickle' , 'pickle' ) ,  MovedModule ( 'queue' , 'Queue' ) ,  MovedModule ( 'reprlib' , 'repr' ) ,  MovedModule ( 'socketserver' , 'SocketServer' ) ,  MovedModule ( '_thread' , 'thread' , '_thread' ) ,  MovedModule ( 'tkinter' , 'Tkinter' ) ,  MovedModule ( 'tkinter_dialog' , 'Dialog' , 'tkinter.dialog' ) ,  MovedModule ( 'tkinter_filedialog' , 'FileDialog' , 'tkinter.filedialog' ) ,  MovedModule ( 'tkinter_scrolledtext' , 'ScrolledText' , 'tkinter.scrolledtext' ) ,  MovedModule ( 'tkinter_simpledialog' , 'SimpleDialog' , 'tkinter.simpledialog' ) ,  MovedModule ( 'tkinter_tix' , 'Tix' , 'tkinter.tix' ) ,  MovedModule ( 'tkinter_ttk' , 'ttk' , 'tkinter.ttk' ) ,  MovedModule ( 'tkinter_constants' , 'Tkconstants' , 'tkinter.constants' ) ,  MovedModule ( 'tkinter_dnd' , 'Tkdnd' , 'tkinter.dnd' ) ,  MovedModule ( 'tkinter_colorchooser' , 'tkColorChooser' ,  'tkinter.colorchooser' ) ,  MovedModule ( 'tkinter_commondialog' , 'tkCommonDialog' ,  'tkinter.commondialog' ) ,  MovedModule ( 'tkinter_tkfiledialog' , 'tkFileDialog' , 'tkinter.filedialog' ) ,  MovedModule ( 'tkinter_font' , 'tkFont' , 'tkinter.font' ) ,  MovedModule ( 'tkinter_messagebox' , 'tkMessageBox' , 'tkinter.messagebox' ) ,  MovedModule ( 'tkinter_tksimpledialog' , 'tkSimpleDialog' ,  'tkinter.simpledialog' ) ,  MovedModule ( 'urllib_parse' , __name__ + '.moves.urllib_parse' , 'urllib.parse' ) ,  MovedModule ( 'urllib_error' , __name__ + '.moves.urllib_error' , 'urllib.error' ) ,  MovedModule ( 'urllib' , __name__ + '.moves.urllib' , __name__ + '.moves.urllib' ) ,  MovedModule ( 'urllib_robotparser' , 'robotparser' , 'urllib.robotparser' ) ,  MovedModule ( 'xmlrpc_client' , 'xmlrpclib' , 'xmlrpc.client' ) ,  MovedModule ( 'xmlrpc_server' , 'xmlrpclib' , 'xmlrpc.server' ) ,  MovedModule ( 'winreg' , '_winreg' ) ,  ]"}
{"intent": "with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,", "snippet": "for attr in _moved_attributes :"}
{"intent": "set attr.name attribute of the _MovedItemst object to attr.", "snippet": "setattr ( _MovedItems , attr . name , attr )"}
{"intent": "if attr is an instance of MovedModule.", "snippet": "if isinstance ( attr , MovedModule ) :"}
{"intent": "concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,", "snippet": "sys . modules [ __name__ + '.moves.' + attr . name ] = attr"}
{"intent": "substitute attr for the obtained value.   delete attr.", "snippet": "del attr"}
{"intent": "substitute _moved_attributes for _MovedItems._moved_attributes.", "snippet": "_MovedItems . _moved_attributes = _moved_attributes"}
{"intent": "append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,", "snippet": "moves = sys . modules [ __name__ + '.moves' ] = _MovedItems ( __name__ + '.moves' )"}
{"intent": "and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.", "snippet": "class Module_six_moves_urllib_parse ( _LazyModule ) :"}
{"intent": "_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.", "snippet": "_urllib_parse_moved_attributes = [  MovedAttribute ( 'ParseResult' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'SplitResult' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'parse_qs' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'parse_qsl' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urldefrag' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urljoin' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urlparse' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urlsplit' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urlunparse' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'urlunsplit' , 'urlparse' , 'urllib.parse' ) ,  MovedAttribute ( 'quote' , 'urllib' , 'urllib.parse' ) ,  MovedAttribute ( 'quote_plus' , 'urllib' , 'urllib.parse' ) ,  MovedAttribute ( 'unquote' , 'urllib' , 'urllib.parse' ) ,  MovedAttribute ( 'unquote_plus' , 'urllib' , 'urllib.parse' ) ,  MovedAttribute ( 'urlencode' , 'urllib' , 'urllib.parse' ) ,  MovedAttribute ( 'splitquery' , 'urllib' , 'urllib.parse' ) ,  ]"}
{"intent": "for every attr in _urllib_parse_moved_attributes,", "snippet": "for attr in _urllib_parse_moved_attributes :"}
{"intent": "set attr.name attribute of the Module_six_moves_urllib_parse object to attr.", "snippet": "setattr ( Module_six_moves_urllib_parse , attr . name , attr )"}
{"intent": "delete attr.", "snippet": "del attr"}
{"intent": "substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.", "snippet": "Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes"}
{"intent": "call the method Module_six_moves_urllib_request with an argument: string '.moves.urllib_parse' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib_parse' ] = sys . modules [ __name__ + '.moves.urllib.parse' ] = Module_six_moves_urllib_parse ( __name__ + '.moves.urllib_parse' )"}
{"intent": "assign the result to the value under the string '.moves.urllib_parse' appended to __name__ key of the sys.modules dictionary,   and to the value under the string '.moves.urllib.parse' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.", "snippet": "class Module_six_moves_urllib_error ( _LazyModule ) :"}
{"intent": "_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:", "snippet": "_urllib_error_moved_attributes = [  MovedAttribute ( 'URLError' , 'urllib2' , 'urllib.error' ) ,  MovedAttribute ( 'HTTPError' , 'urllib2' , 'urllib.error' ) ,  MovedAttribute ( 'ContentTooShortError' , 'urllib' , 'urllib.error' ) ,  ]"}
{"intent": "strings 'URLError', 'urllib2', 'urllib.error', result of the call to the function MovedAttribute with 3 arguments:   strings 'HTTPError', 'urllib2', 'urllib.error' and result of the call to the function MovedAttribute with 3 arguments:   strings 'ContentTooShortError', 'urllib', 'urllib.error'.   for every attr in _urllib_error_moved_attributes,", "snippet": "for attr in _urllib_error_moved_attributes :"}
{"intent": "set attr.name attribute of the Module_six_moves_urllib_error object to attr.", "snippet": "setattr ( Module_six_moves_urllib_error , attr . name , attr )"}
{"intent": "delete attr.", "snippet": "del attr"}
{"intent": "substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.", "snippet": "Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes"}
{"intent": "call the method Module_six_moves_urllib_request with an argument: string '.moves.urllib.error' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib_error' ] = sys . modules [ __name__ + '.moves.urllib.error' ] = Module_six_moves_urllib_error ( __name__ + '.moves.urllib.error' )"}
{"intent": "assign the result to the value under the string '.moves.urllib_error' appended to __name__ key of the sys.modules dictionary,   and to the value under the string '.moves.urllib.error' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.", "snippet": "class Module_six_moves_urllib_request ( _LazyModule ) :"}
{"intent": "_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.", "snippet": "_urllib_request_moved_attributes = [  MovedAttribute ( 'urlopen' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'install_opener' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'build_opener' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'pathname2url' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'url2pathname' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'getproxies' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'Request' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'OpenerDirector' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPDefaultErrorHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPRedirectHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPCookieProcessor' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'ProxyHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'BaseHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPPasswordMgr' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPPasswordMgrWithDefaultRealm' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'AbstractBasicAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPBasicAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'ProxyBasicAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'AbstractDigestAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPDigestAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'ProxyDigestAuthHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPSHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'FileHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'FTPHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'CacheFTPHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'UnknownHandler' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'HTTPErrorProcessor' , 'urllib2' , 'urllib.request' ) ,  MovedAttribute ( 'urlretrieve' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'urlcleanup' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'URLopener' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'FancyURLopener' , 'urllib' , 'urllib.request' ) ,  MovedAttribute ( 'proxy_bypass' , 'urllib' , 'urllib.request' ) ,  ]"}
{"intent": "for every attr in _urllib_request_moved_attributes,", "snippet": "for attr in _urllib_request_moved_attributes :"}
{"intent": "set attr.name attribute of the Module_six_moves_urllib_request object to attr.", "snippet": "setattr ( Module_six_moves_urllib_request , attr . name , attr )"}
{"intent": "delete attr.", "snippet": "del attr"}
{"intent": "substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.", "snippet": "Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes"}
{"intent": "call the method Module_six_moves_urllib_request with an argument: string '.moves.urllib.request' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib_request' ] = sys . modules [ __name__ + '.moves.urllib.request' ] = Module_six_moves_urllib_request ( __name__ + '.moves.urllib.request' )"}
{"intent": "assign the result to the value under the string '.moves.urllib_request' appended to __name__ key of the sys.modules dictionary,   and to the value under the string '.moves.urllib.request' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.", "snippet": "class Module_six_moves_urllib_response ( _LazyModule ) :"}
{"intent": "_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:", "snippet": "_urllib_response_moved_attributes = [  MovedAttribute ( 'addbase' , 'urllib' , 'urllib.response' ) ,  MovedAttribute ( 'addclosehook' , 'urllib' , 'urllib.response' ) ,  MovedAttribute ( 'addinfo' , 'urllib' , 'urllib.response' ) ,  MovedAttribute ( 'addinfourl' , 'urllib' , 'urllib.response' ) ,  ]"}
{"intent": "strings 'addbase', 'urllib' and 'urllib.response', result of the function MovedAttribute, called with 3 arguments:   strings 'addclosehook', 'urllib', 'urllib.response', result of the function MovedAttribute, called with 3 arguments:   strings 'addinfo', 'urllib', 'urllib.response' and result of the function MovedAttribute, called with 3 arguments:   strings 'addinfourl', 'urllib', 'urllib.response'.   for every attr in _urllib_response_moved_attributes,", "snippet": "for attr in _urllib_response_moved_attributes :"}
{"intent": "set attr.name attribute of Module_six_moves_urllib_response object to attr.", "snippet": "setattr ( Module_six_moves_urllib_response , attr . name , attr )"}
{"intent": "delete attr.", "snippet": "del attr"}
{"intent": "substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.", "snippet": "Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes"}
{"intent": "instantiate class Module_six_moves_urllib_response with an argument, string '.moves.urllib.response' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib_response' ] = sys . modules [ __name__ + '.moves.urllib.response' ] = Module_six_moves_urllib_response ( __name__ + '.moves.urllib.response' )"}
{"intent": "assign it to value under the string '.moves.urllib_response' appended to __name__ key of the sys.modules dictionary,   and to value under the string '.moves.urllib.response' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.", "snippet": "class Module_six_moves_urllib_robotparser ( _LazyModule ) :"}
{"intent": "_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,", "snippet": "_urllib_robotparser_moved_attributes = [  MovedAttribute ( 'RobotFileParser' , 'robotparser' , 'urllib.robotparser' ) ,  ]"}
{"intent": "'RobotFileParser', 'robotparser', 'urllib.robotparser'.   for every attr in _urllib_robotparser_moved_attributes,", "snippet": "for attr in _urllib_robotparser_moved_attributes :"}
{"intent": "set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.", "snippet": "setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )"}
{"intent": "delete attr.", "snippet": "del attr"}
{"intent": "substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.", "snippet": "Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes"}
{"intent": "instantiate class Module_six_moves_urllib_robotparser with an argument, string '.moves.urllib.robotparser' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib_robotparser' ] = sys . modules [ __name__ + '.moves.urllib.robotparser' ] = Module_six_moves_urllib_robotparser ( __name__ + '.moves.urllib.robotparser' )"}
{"intent": "assign it to value under the string '.moves.urllib_robotparser' appended to __name__ key of the sys.modules dictionary,   and to value under the string '.moves.urllib.robotparser' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.", "snippet": "class Module_six_moves_urllib ( types . ModuleType ) :"}
{"intent": "append string '.moves.urllib_parse' to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.", "snippet": "parse = sys . modules [ __name__ + '.moves.urllib_parse' ]"}
{"intent": "append string '.moves.urllib_error' to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.", "snippet": "error = sys . modules [ __name__ + '.moves.urllib_error' ]"}
{"intent": "append string '.moves.urllib_request' to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.", "snippet": "request = sys . modules [ __name__ + '.moves.urllib_request' ]"}
{"intent": "append string '.moves.urllib_response' to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.", "snippet": "response = sys . modules [ __name__ + '.moves.urllib_response' ]"}
{"intent": "append string '.moves.urllib_robotparser' to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.", "snippet": "robotparser = sys . modules [ __name__ + '.moves.urllib_robotparser' ]"}
{"intent": "define the method __dir__ with an argument self.", "snippet": "def __dir__ ( self ) :"}
{"intent": "return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.", "snippet": "return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]"}
{"intent": "instantiate class Module_six_moves_urllib with an argument, string '.moves.urllib' appended to __name__,", "snippet": "sys . modules [ __name__ + '.moves.urllib' ] = Module_six_moves_urllib ( __name__ + '.moves.urllib' )"}
{"intent": "substitute it for value under the string '.moves.urllib' appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.", "snippet": "def add_move ( move ) :"}
{"intent": "set move.name attribute of the _MovedItems to move.", "snippet": "setattr ( _MovedItems , move . name , move )"}
{"intent": "define the function remove_move with an argument name.", "snippet": "def remove_move ( name ) :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "delete name attribute of the _MovedItems object.", "snippet": "delattr ( _MovedItems , name )"}
{"intent": "if AttributeError exception is caught,", "snippet": "except AttributeError :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "delete entry under the name key of the moves.__dict__ dictionary.", "snippet": "del moves . __dict__ [ name ]"}
{"intent": "if NameError exception is caught,", "snippet": "except KeyError :"}
{"intent": "raise an AttributeError with an argument string 'no such move, %r', formated with a tuple with an element name.", "snippet": "raise AttributeError ( 'no such move, %r' % ( name , ) )"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "_meth_func is a string '__func__'.", "snippet": "_meth_func = '__func__'"}
{"intent": "_meth_self is a string '__self__'.", "snippet": "_meth_self = '__self__'"}
{"intent": "_func_closure is a string '__closure__'.", "snippet": "_func_closure = '__closure__'"}
{"intent": "_func_code is a string '__code__'.", "snippet": "_func_code = '__code__'"}
{"intent": "_func_defaults is a string '__defaults__'.", "snippet": "_func_defaults = '__defaults__'"}
{"intent": "_func_globals is a string '__globals__'.", "snippet": "_func_globals = '__globals__'"}
{"intent": "_iterkeys is a string 'keys'.", "snippet": "_iterkeys = 'keys'"}
{"intent": "_itervalues is a string 'values'.", "snippet": "_itervalues = 'values'"}
{"intent": "_iteritems is a string 'items'.", "snippet": "_iteritems = 'items'"}
{"intent": "_iterlists is a string 'lists'.", "snippet": "_iterlists = 'lists'"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "_meth_func is a string 'im_func'.", "snippet": "_meth_func = 'im_func'"}
{"intent": "_meth_self is a string 'im_self'.", "snippet": "_meth_self = 'im_self'"}
{"intent": "_func_closure is a string 'func_closure'.", "snippet": "_func_closure = 'func_closure'"}
{"intent": "_func_code is a string 'func_code'.", "snippet": "_func_code = 'func_code'"}
{"intent": "_func_defaults is a string 'func_defaults'.", "snippet": "_func_defaults = 'func_defaults'"}
{"intent": "_func_globals is a string 'func_globals'.", "snippet": "_func_globals = 'func_globals'"}
{"intent": "_iterkeys is a string 'iterkeys'.", "snippet": "_iterkeys = 'iterkeys'"}
{"intent": "_iterkeys is a string 'iterkeys'.", "snippet": "_itervalues = 'itervalues'"}
{"intent": "_iteritems is a string 'iteritems'.", "snippet": "_iteritems = 'iteritems'"}
{"intent": "_iterlists is a string 'iterlists'.", "snippet": "_iterlists = 'iterlists'"}
{"intent": "try,", "snippet": "try :"}
{"intent": "substitute next for advance_iterator.", "snippet": "advance_iterator = next"}
{"intent": "if NameError exception is caught,", "snippet": "except NameError :"}
{"intent": "define the function advance_iterator with an argument it.", "snippet": "def advance_iterator ( it ) :"}
{"intent": "return next element of the iterable it.", "snippet": "return it . next ( )"}
{"intent": "substitute klass.__dict__ for next.", "snippet": "next = advance_iterator"}
{"intent": "try,", "snippet": "try :"}
{"intent": "substitute callable for callable.", "snippet": "callable = callable"}
{"intent": "if NameError exception is caught,", "snippet": "except NameError :"}
{"intent": "define the function callable with an argument obj.", "snippet": "def callable ( obj ) :"}
{"intent": "if '__call__' is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.", "snippet": "return any ( '__call__' in klass . __dict__ for klass in type ( obj ) . __mro__ )"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "define the function get_unbound_function with an argument unbound.", "snippet": "def get_unbound_function ( unbound ) :"}
{"intent": "return unbound.", "snippet": "return unbound"}
{"intent": "substitute Iterator for create_bound_method.", "snippet": "create_bound_method = types . MethodType"}
{"intent": "substitute object for Iterator.", "snippet": "Iterator = object"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "define the function get_unbound_function with an argument unbound.", "snippet": "def get_unbound_function ( unbound ) :"}
{"intent": "return unbound.im_func.", "snippet": "return unbound . im_func"}
{"intent": "define the function create_bound_function with 2 arguments: func and obj.", "snippet": "def create_bound_method ( func , obj ) :"}
{"intent": "call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.", "snippet": "return types . MethodType ( func , obj , obj . __class__ )"}
{"intent": "derive the class Iterator from the base class object.", "snippet": "class Iterator ( object ) :"}
{"intent": "define the method next with an argument self.", "snippet": "def next ( self ) :"}
{"intent": "call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.", "snippet": "return type ( self ) . __next__ ( self )"}
{"intent": "substitute callable for callable.", "snippet": "callable = callable"}
{"intent": "call the function _add_doc with 2 arguments: get_unbound_function and string '''Get the function out of a possibly unbound function'''.", "snippet": "_add_doc ( get_unbound_function ,  '''Get the function out of a possibly unbound function''' )"}
{"intent": "call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.", "snippet": "get_method_function = operator . attrgetter ( _meth_func )"}
{"intent": "call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.", "snippet": "get_method_self = operator . attrgetter ( _meth_self )"}
{"intent": "call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.", "snippet": "get_function_closure = operator . attrgetter ( _func_closure )"}
{"intent": "call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.", "snippet": "get_function_code = operator . attrgetter ( _func_code )"}
{"intent": "call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.", "snippet": "get_function_defaults = operator . attrgetter ( _func_defaults )"}
{"intent": "call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.", "snippet": "get_function_globals = operator . attrgetter ( _func_globals )"}
{"intent": "define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.", "snippet": "def iterkeys ( d , ** kw ) :"}
{"intent": "get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,", "snippet": "return iter ( getattr ( d , _iterkeys ) ( ** kw ) )"}
{"intent": "return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.", "snippet": "def itervalues ( d , ** kw ) :"}
{"intent": "get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,", "snippet": "return iter ( getattr ( d , _itervalues ) ( ** kw ) )"}
{"intent": "return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.", "snippet": "def iteritems ( d , ** kw ) :"}
{"intent": "get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,", "snippet": "return iter ( getattr ( d , _iteritems ) ( ** kw ) )"}
{"intent": "return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.", "snippet": "def iterlists ( d , ** kw ) :"}
{"intent": "get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,", "snippet": "return iter ( getattr ( d , _iterlists ) ( ** kw ) )"}
{"intent": "return it.   if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "define the function b with an argument s.", "snippet": "def b ( s ) :"}
{"intent": "call the method e.encode with an argument string 'latin-1'.", "snippet": "return s . encode ( 'latin-1' )"}
{"intent": "define the function u with an argument s.", "snippet": "def u ( s ) :"}
{"intent": "return s.", "snippet": "return s"}
{"intent": "substitute chr for unichr.", "snippet": "unichr = chr"}
{"intent": "if second element of sys.version_info is smaller than or equal to integer 1,", "snippet": "if sys . version_info [ 1 ] <= 1 :"}
{"intent": "define the function int2byte with an argument i.", "snippet": "def int2byte ( i ) :"}
{"intent": "call the function bytes with an argument tuple with an element i, return the result.", "snippet": "return bytes ( ( i , ) )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.", "snippet": "int2byte = operator . methodcaller ( 'to_bytes' , 1 , 'big' )"}
{"intent": "call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.", "snippet": "byte2int = operator . itemgetter ( 0 )"}
{"intent": "substitute operator.getitem for indexbytes.", "snippet": "indexbytes = operator . getitem"}
{"intent": "substitute iter for iterbytes.", "snippet": "iterbytes = iter"}
{"intent": "import io.", "snippet": "import io"}
{"intent": "substitute io.StringIO for StringIO.", "snippet": "StringIO = io . StringIO"}
{"intent": "substitute io.BytesIO for BytesIO.", "snippet": "BytesIO = io . BytesIO"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "define the function b with an argument s.", "snippet": "def b ( s ) :"}
{"intent": "return s.", "snippet": "return s"}
{"intent": "define the function u with an argument s.", "snippet": "def u ( s ) :"}
{"intent": "replace every occurrence of raw string '\\\\' in s with a raw string '\\\\\\\\', use the result and string 'unicode_escape',", "snippet": "return unicode ( s . replace ( r'\\\\' , r'\\\\\\\\' ) , 'unicode_escape' )"}
{"intent": "as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.", "snippet": "unichr = unichr"}
{"intent": "substitute chr for int2byte.", "snippet": "int2byte = chr"}
{"intent": "define the function byte2int with an argument bs.", "snippet": "def byte2int ( bs ) :"}
{"intent": "get the integer representation of the first element of bs, return it.", "snippet": "return ord ( bs [ 0 ] )"}
{"intent": "define the function indexbytes with 2 arguments buf and i.", "snippet": "def indexbytes ( buf , i ) :"}
{"intent": "get the integer representation of the i-th element of buf, return it.", "snippet": "return ord ( buf [ i ] )"}
{"intent": "define the function iterbytes with an argument buf.", "snippet": "def iterbytes ( buf ) :"}
{"intent": "convert byte to its integer representation, return all of the results for every byte in buf.", "snippet": "return ( ord ( byte ) for byte in buf )"}
{"intent": "import StringIO.", "snippet": "import StringIO"}
{"intent": "assign StringIO.StringIO to StringIO and BytesIO.", "snippet": "StringIO = BytesIO = StringIO . StringIO"}
{"intent": "call the function _add_doc with 2 arguments: b and string '''Byte literal'''.", "snippet": "_add_doc ( b , '''Byte literal''' )"}
{"intent": "call the function _add_doc with 2 arguments: u and string '''Text literal'''.", "snippet": "_add_doc ( u , '''Text literal''' )"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "get 'exec' attribute from the moves.builtins object, substitute it for exec_.", "snippet": "exec_ = getattr ( moves . builtins , 'exec' )"}
{"intent": "define the function reraise with 3 arguments: tp, value and tb set to None.", "snippet": "def reraise ( tp , value , tb = None ) :"}
{"intent": "if value.__traceback__ is not tb,", "snippet": "if value . __traceback__ is not tb :"}
{"intent": "raise an value.with_traceback exception with an argument tb.", "snippet": "raise value . with_traceback ( tb )"}
{"intent": "raise an exception value.", "snippet": "raise value"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.", "snippet": "def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :"}
{"intent": "if _globs_ is None,", "snippet": "if _globs_ is None :"}
{"intent": "call the method sys._getframe with an argument 1, substitute the result for frame.", "snippet": "frame = sys . _getframe ( 1 )"}
{"intent": "substitute frame.f_globals for _globs_.", "snippet": "_globs_ = frame . f_globals"}
{"intent": "if _locs_ is None,", "snippet": "if _locs_ is None :"}
{"intent": "substitute if _locs_ is None for _locs_.", "snippet": "_locs_ = frame . f_locals"}
{"intent": "delete frame.", "snippet": "del frame"}
{"intent": "otherwise if _locs_ is None,", "snippet": "elif _locs_ is None :"}
{"intent": "substitute _globs_ with an argument _locs_.", "snippet": "_locs_ = _globs_"}
{"intent": "execute code statement '''exec _code_ in _globs_, _locs_'''.", "snippet": "exec ( '''exec _code_ in _globs_, _locs_''' )"}
{"intent": "call the function exec_ with an argument string '''def reraise(tp, value, tb=None):    raise tp, value, tb'''.", "snippet": "exec_ ( '''def reraise(tp, value, tb=None):     raise tp, value, tb ''' )"}
{"intent": "get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.", "snippet": "print_ = getattr ( moves . builtins , 'print' , None )"}
{"intent": "if print_ is None,", "snippet": "if print_ is None :"}
{"intent": "define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.", "snippet": "def print_ ( * args , ** kwargs ) :"}
{"intent": "remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.", "snippet": "fp = kwargs . pop ( 'file' , sys . stdout )"}
{"intent": "if fp is None,", "snippet": "if fp is None :"}
{"intent": "return nothing.", "snippet": "return"}
{"intent": "define the function write with an argument data.", "snippet": "def write ( data ) :"}
{"intent": "if data is not an instance of basestring,", "snippet": "if not isinstance ( data , basestring ) :"}
{"intent": "convert data to string, substitute it for data.", "snippet": "data = str ( data )"}
{"intent": "if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,", "snippet": "if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :"}
{"intent": "get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.", "snippet": "errors = getattr ( fp , 'errors' , None )"}
{"intent": "if errors is None,", "snippet": "if errors is None :"}
{"intent": "errors is a string 'strict'.", "snippet": "errors = 'strict'"}
{"intent": "call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.", "snippet": "data = data . encode ( fp . encoding , errors )"}
{"intent": "write data to fp.", "snippet": "fp . write ( data )"}
{"intent": "want_unicode is boolean False.", "snippet": "want_unicode = False"}
{"intent": "remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.", "snippet": "sep = kwargs . pop ( 'sep' , None )"}
{"intent": "if sep is not None,", "snippet": "if sep is not None :"}
{"intent": "if sep is an instance of unicode,", "snippet": "if isinstance ( sep , unicode ) :"}
{"intent": "want_unicode is boolean True.", "snippet": "want_unicode = True"}
{"intent": "otherwise if sep is not an instance of string type,", "snippet": "elif not isinstance ( sep , str ) :"}
{"intent": "raise an TypeError exception with an argument string 'sep must be None or a string'.", "snippet": "raise TypeError ( 'sep must be None or a string' )"}
{"intent": "remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.", "snippet": "end = kwargs . pop ( 'end' , None )"}
{"intent": "if end is not None,", "snippet": "if end is not None :"}
{"intent": "if end is an instance of unicode,", "snippet": "if isinstance ( end , unicode ) :"}
{"intent": "want_unicode is boolean True.", "snippet": "want_unicode = True"}
{"intent": "otherwise if end is not an instance of string type,", "snippet": "elif not isinstance ( end , str ) :"}
{"intent": "raise an TypeError exception with an argument string 'end must be None or a string'.", "snippet": "raise TypeError ( 'end must be None or a string' )"}
{"intent": "if kwargs is true,", "snippet": "if kwargs :"}
{"intent": "raise an TypeError exception with an argument string 'invalid keyword arguments to print()'.", "snippet": "raise TypeError ( 'invalid keyword arguments to print()' )"}
{"intent": "if want_unicode is false,", "snippet": "if not want_unicode :"}
{"intent": "for every arg in args,", "snippet": "for arg in args :"}
{"intent": "if arg is an instance of unicode,", "snippet": "if isinstance ( arg , unicode ) :"}
{"intent": "want_unicode is boolean True.", "snippet": "want_unicode = True"}
{"intent": "break from the loop execution.", "snippet": "break"}
{"intent": "if want_unicode is true,", "snippet": "if want_unicode :"}
{"intent": "convert newline character to unicode and substitute the result for newline.", "snippet": "newline = unicode ( '\\n' )"}
{"intent": "convert whitespace character to unicode and substitute the result for space.", "snippet": "space = unicode ( ' ' )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute newline character for newline.", "snippet": "newline = '\\n'"}
{"intent": "substitute string ' ' for space.", "snippet": "space = ' '"}
{"intent": "if sep is None,", "snippet": "if sep is None :"}
{"intent": "substitute space for sep.", "snippet": "sep = space"}
{"intent": "if end is None", "snippet": "if end is None :"}
{"intent": "substitute space for end.", "snippet": "end = newline"}
{"intent": "for every i and arg in enumerated iterable args,", "snippet": "for i , arg in enumerate ( args ) :"}
{"intent": "if i is true,", "snippet": "if i :"}
{"intent": "call the function write with an argument sep.", "snippet": "write ( sep )"}
{"intent": "call the function write with an argument arg.", "snippet": "write ( arg )"}
{"intent": "call the function write with an argument end.", "snippet": "write ( end )"}
{"intent": "call the function _add_doc with 2 arguments: reraise and string '''Reraise an exception.'''.", "snippet": "_add_doc ( reraise , '''Reraise an exception.''' )"}
{"intent": "define the function with_metaclass with 2 arguments meta and unpacked list bases.", "snippet": "def with_metaclass ( meta , * bases ) :"}
{"intent": "derive the class metaclass form the meta base class.", "snippet": "class metaclass ( meta ) :"}
{"intent": "substitute type.__call__ for __call__.", "snippet": "__call__ = type . __call__"}
{"intent": "substitute type.__init__ for __init__.", "snippet": "__init__ = type . __init__"}
{"intent": "define the method __new__ with 4 arguments: cls, name, this_bases and d.", "snippet": "def __new__ ( cls , name , this_bases , d ) :"}
{"intent": "if this_bases is None,", "snippet": "if this_bases is None :"}
{"intent": "call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.", "snippet": "return type . __new__ ( cls , name , ( ) , d )"}
{"intent": "call the function meta with 3 arguments: name, base and d.", "snippet": "return meta ( name , bases , d )"}
{"intent": "return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.", "snippet": "return metaclass ( 'temporary_class' , None , \\{ \\} )"}
{"intent": "define the function add_metaclass with an argument metaclass.", "snippet": "def add_metaclass ( metaclass ) :"}
{"intent": "define the function wrapper with an argument cls.", "snippet": "def wrapper ( cls ) :"}
{"intent": "call the method cls.__dict__.copy substitute the result for orig_vars.", "snippet": "orig_vars = cls . __dict__ . copy ( )"}
{"intent": "remove '__dict__' key from the orig_vars dictionary.", "snippet": "orig_vars . pop ( '__dict__' , None )"}
{"intent": "remove '__weakref__' key from the orig_vars dictionary.", "snippet": "orig_vars . pop ( '__weakref__' , None )"}
{"intent": "get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.", "snippet": "slots = orig_vars . get ( '__slots__' )"}
{"intent": "if slots is not None,", "snippet": "if slots is not None :"}
{"intent": "if slots is an instance of str,", "snippet": "if isinstance ( slots , str ) :"}
{"intent": "slots is a list with an element, slots.", "snippet": "slots = [ slots ]"}
{"intent": "for every slots_var in slots,", "snippet": "for slots_var in slots :"}
{"intent": "remove slots_var key from the orig_vars dictionary.", "snippet": "orig_vars . pop ( slots_var )"}
{"intent": "return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.", "snippet": "return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )"}
{"intent": "return wrapper.", "snippet": "return wrapper"}
{"intent": "if PY3 is true,", "snippet": "if PY3 :"}
{"intent": "_assertCountEqual is a strnig 'assertCountEqual'.", "snippet": "_assertCountEqual = 'assertCountEqual'"}
{"intent": "_assertRaisesRegex is a strnig 'assertRaisesRegex'.", "snippet": "_assertRaisesRegex = 'assertRaisesRegex'"}
{"intent": "_assertRegex is a strnig 'assertRegex'.", "snippet": "_assertRegex = 'assertRegex'"}
{"intent": "substitute memoryview for memoryview.", "snippet": "memoryview = memoryview"}
{"intent": "buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.", "snippet": "buffer_types = ( bytes , bytearray , memoryview )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "_assertCountEqual is a strnig 'assertItemsEqual'.", "snippet": "_assertCountEqual = 'assertItemsEqual'"}
{"intent": "_assertRaisesRegex is a strnig 'assertRaisesRegexp'.", "snippet": "_assertRaisesRegex = 'assertRaisesRegexp'"}
{"intent": "_assertRegex is a strnig 'assertRegexpMatches'.", "snippet": "_assertRegex = 'assertRegexpMatches'"}
{"intent": "if sys.platform starts with a string 'java',", "snippet": "if sys . platform . startswith ( 'java' ) :"}
{"intent": "substitute memoryview for memoryview.", "snippet": "memoryview = memoryview"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute buffer for memoryview.", "snippet": "memoryview = buffer"}
{"intent": "buffer_types is a tuple with 2 elements bytearray and memoryview.", "snippet": "buffer_types = ( bytearray , memoryview )"}
{"intent": "define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.", "snippet": "def assertCountEqual ( self , * args , ** kwargs ) :"}
{"intent": "get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,", "snippet": "return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )"}
{"intent": "and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.", "snippet": "def assertRaisesRegex ( self , * args , ** kwargs ) :"}
{"intent": "get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,", "snippet": "return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )"}
{"intent": "and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.", "snippet": "def assertRegex ( self , * args , ** kwargs ) :"}
{"intent": "get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,", "snippet": "return getattr ( self , _assertRegex ) ( * args , ** kwargs )"}
{"intent": "and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings '_dummy_thread' and 'dummy_thread',", "snippet": "add_move ( MovedModule ( '_dummy_thread' , 'dummy_thread' ) )"}
{"intent": "use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings '_thread' and 'thread',", "snippet": "add_move ( MovedModule ( '_thread' , 'thread' ) )"}
{"intent": "import module contextlib.", "snippet": "import contextlib"}
{"intent": "try,", "snippet": "try :"}
{"intent": "import threading.", "snippet": "import threading"}
{"intent": "except ImportError.", "snippet": "except ImportError :"}
{"intent": "import dummy_threading as threading.", "snippet": "import dummy_threading as threading"}
{"intent": "derive the class RWLock from the object base class.", "snippet": "class RWLock ( object ) :"}
{"intent": "define the method __init__ with an argument self.", "snippet": "def __init__ ( self ) :"}
{"intent": "call the method threading.RLock, substitute the result for self.mutex.", "snippet": "self . mutex = threading . RLock ( )"}
{"intent": "call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.", "snippet": "self . can_read = threading . Semaphore ( 0 )"}
{"intent": "call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.", "snippet": "self . can_write = threading . Semaphore ( 0 )"}
{"intent": "self.active_readers is an integer 0.", "snippet": "self . active_readers = 0"}
{"intent": "self.active_writers is an integer 0.", "snippet": "self . active_writers = 0"}
{"intent": "self.waiting_readers is an integer 0.", "snippet": "self . waiting_readers = 0"}
{"intent": "self.waiting_writers is an integer 0.", "snippet": "self . waiting_writers = 0"}
{"intent": "define the method reader_enters with an argument self.", "snippet": "def reader_enters ( self ) :"}
{"intent": "with self.mutex perform,", "snippet": "with self . mutex :"}
{"intent": "if self.active_writers and self.waiting_writers both equal to integer 0,", "snippet": "if self . active_writers == 0 and self . waiting_writers == 0 :"}
{"intent": "increment self.active_readers by 1.", "snippet": "self . active_readers += 1"}
{"intent": "call the method self.can_read.release.", "snippet": "self . can_read . release ( )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "increment self.waiting_readers by 1.", "snippet": "self . waiting_readers += 1"}
{"intent": "call the method self.can_read.acquire.", "snippet": "self . can_read . acquire ( )"}
{"intent": "define the method reader_leaves with an argument self.", "snippet": "def reader_leaves ( self ) :"}
{"intent": "with self.mutex perform,", "snippet": "with self . mutex :"}
{"intent": "decrement self.active_readers by integer 1,", "snippet": "self . active_readers -= 1"}
{"intent": "if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,", "snippet": "if self . active_readers == 0 and self . waiting_writers != 0 :"}
{"intent": "increment self.active_writers by 1.", "snippet": "self . active_writers += 1"}
{"intent": "decrement self.waiting_writers by integer 1,", "snippet": "self . waiting_writers -= 1"}
{"intent": "call the method self.can_write.release.", "snippet": "self . can_write . release ( )"}
{"intent": "contextlib.contextmanager decorator,", "snippet": "@ contextlib . contextmanager"}
{"intent": "define the method reader with an argument self.", "snippet": "def reader ( self ) :"}
{"intent": "call the method self.reader_enters.", "snippet": "self . reader_enters ( )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "yield nothing.", "snippet": "yield"}
{"intent": "finally perform,", "snippet": "finally :"}
{"intent": "call the method self.reader_leaves.", "snippet": "self . reader_leaves ( )"}
{"intent": "define the method writer_enters with an argument self.", "snippet": "def writer_enters ( self ) :"}
{"intent": "with self.mutex perform,", "snippet": "with self . mutex :"}
{"intent": "if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,", "snippet": "if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :"}
{"intent": "increment self.active_writers by integer 1,", "snippet": "self . active_writers += 1"}
{"intent": "call the method self.can_write.release.", "snippet": "self . can_write . release ( )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "increment self.waiting_writers by integer 1,", "snippet": "self . waiting_writers += 1"}
{"intent": "call the method self.can_write.acquire.", "snippet": "self . can_write . acquire ( )"}
{"intent": "define the method writer_leaves with an argument self.", "snippet": "def writer_leaves ( self ) :"}
{"intent": "with self.mutex perform,", "snippet": "with self . mutex :"}
{"intent": "decrement self.active_writers by integer 1,", "snippet": "self . active_writers -= 1"}
{"intent": "if self.waiting_writers is not equal to integer 0,", "snippet": "if self . waiting_writers != 0 :"}
{"intent": "increment self.active_writers by integer 1,", "snippet": "self . active_writers += 1"}
{"intent": "decrement self.waiting_writers by integer 1,", "snippet": "self . waiting_writers -= 1"}
{"intent": "call the method self.can_write.release.", "snippet": "self . can_write . release ( )"}
{"intent": "otherwise if self.waiting_readers is not equal to integer 0,", "snippet": "elif self . waiting_readers != 0 :"}
{"intent": "substitute self.waiting_readers for t.", "snippet": "t = self . waiting_readers"}
{"intent": "self.waiting_readers is integer 0.", "snippet": "self . waiting_readers = 0"}
{"intent": "increment self.active_readers by t.", "snippet": "self . active_readers += t"}
{"intent": "while t is greater than integer 0,", "snippet": "while t > 0 :"}
{"intent": "call the method self.can_read.release.", "snippet": "self . can_read . release ( )"}
{"intent": "decrement t by integer 1,", "snippet": "t -= 1"}
{"intent": "contextlib.contextmanager decorator,", "snippet": "@ contextlib . contextmanager"}
{"intent": "define the method writer with an argument self.", "snippet": "def writer ( self ) :"}
{"intent": "call the method self.writer_enters.", "snippet": "self . writer_enters ( )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "yield nothing.", "snippet": "yield"}
{"intent": "finally perform,", "snippet": "finally :"}
{"intent": "call the method self.writer_leaves.", "snippet": "self . writer_leaves ( )"}
{"intent": "from django.utils import six into default name space.", "snippet": "from django . utils import six"}
{"intent": "color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.", "snippet": "color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )"}
{"intent": "foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,", "snippet": "foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )"}
{"intent": "for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,", "snippet": "background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )"}
{"intent": "for every x in sequence of integers from 0 to 7.   RESET is a string '0'.", "snippet": "RESET = '0'"}
{"intent": "opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',", "snippet": "opt_dict = \\{ 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' \\}"}
{"intent": "and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.", "snippet": "def colorize ( text = '' , opts = ( ) , ** kwargs ) :"}
{"intent": "code_list is an empty list.", "snippet": "code_list = [ ]"}
{"intent": "if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',", "snippet": "if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :"}
{"intent": "format string '\\x1b[%sm' with RESET, return the result.", "snippet": "return '\\x1b[%sm' % RESET"}
{"intent": "call the function six.iteritems with an argument kwargs, for every k and v in the result,", "snippet": "for k , v in six . iteritems ( kwargs ) :"}
{"intent": "if k equals a string 'fg',", "snippet": "if k == 'fg' :"}
{"intent": "append value under the key v of foreground dictionary to code_list.", "snippet": "code_list . append ( foreground [ v ] )"}
{"intent": "otherwise if k equals a string 'bg',", "snippet": "elif k == 'bg' :"}
{"intent": "append value under the key v of background dictionary to code_list.", "snippet": "code_list . append ( background [ v ] )"}
{"intent": "for every o in opts,", "snippet": "for o in opts :"}
{"intent": "if o is contained in opt_dict,", "snippet": "if o in opt_dict :"}
{"intent": "append value under the 0 key of the opt_dict dictionary to code_list.", "snippet": "code_list . append ( opt_dict [ o ] )"}
{"intent": "if string 'noreset' is not contained in opts,", "snippet": "if 'noreset' not in opts :"}
{"intent": "if text is true format with it and RESET a string '%s\\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.", "snippet": "text = '%s\\x1b[%sm' % ( text or '' , RESET )"}
{"intent": "join elements of code_list in a string, separated by ';', format string '\\x1b[%sm' with it, append text to the result if exists,", "snippet": "return '%s%s' % ( ( '\\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )"}
{"intent": "return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.", "snippet": "def make_style ( opts = ( ) , ** kwargs ) :"}
{"intent": "return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,", "snippet": "return lambda text : colorize ( text , opts , ** kwargs )"}
{"intent": "opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.", "snippet": "NOCOLOR_PALETTE = 'nocolor'"}
{"intent": "DARK_PALETTE is a string 'dark'.", "snippet": "DARK_PALETTE = 'dark'"}
{"intent": "LIGHT_PALETTE is a string 'light'.", "snippet": "LIGHT_PALETTE = 'light'"}
{"intent": "PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,", "snippet": "PALETTES = \\{  NOCOLOR_PALETTE : \\{  'ERROR' : \\{ \\} ,  'WARNING' : \\{ \\} ,  'NOTICE' : \\{ \\} ,  'SQL_FIELD' : \\{ \\} ,  'SQL_COLTYPE' : \\{ \\} ,  'SQL_KEYWORD' : \\{ \\} ,  'SQL_TABLE' : \\{ \\} ,  'HTTP_INFO' : \\{ \\} ,  'HTTP_SUCCESS' : \\{ \\} ,  'HTTP_REDIRECT' : \\{ \\} ,  'HTTP_NOT_MODIFIED' : \\{ \\} ,  'HTTP_BAD_REQUEST' : \\{ \\} ,  'HTTP_NOT_FOUND' : \\{ \\} ,  'HTTP_SERVER_ERROR' : \\{ \\} ,  'MIGRATE_HEADING' : \\{ \\} ,  'MIGRATE_LABEL' : \\{ \\} ,  'MIGRATE_SUCCESS' : \\{ \\} ,  'MIGRATE_FAILURE' : \\{ \\} ,  \\} ,  DARK_PALETTE : \\{  'ERROR' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  'WARNING' : \\{ 'fg' : 'yellow' , 'opts' : ( 'bold' , ) \\} ,  'NOTICE' : \\{ 'fg' : 'red' \\} ,  'SQL_FIELD' : \\{ 'fg' : 'green' , 'opts' : ( 'bold' , ) \\} ,  'SQL_COLTYPE' : \\{ 'fg' : 'green' \\} ,  'SQL_KEYWORD' : \\{ 'fg' : 'yellow' \\} ,  'SQL_TABLE' : \\{ 'opts' : ( 'bold' , ) \\} ,  'HTTP_INFO' : \\{ 'opts' : ( 'bold' , ) \\} ,  'HTTP_SUCCESS' : \\{ \\} ,  'HTTP_REDIRECT' : \\{ 'fg' : 'green' \\} ,  'HTTP_NOT_MODIFIED' : \\{ 'fg' : 'cyan' \\} ,  'HTTP_BAD_REQUEST' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  'HTTP_NOT_FOUND' : \\{ 'fg' : 'yellow' \\} ,  'HTTP_SERVER_ERROR' : \\{ 'fg' : 'magenta' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_HEADING' : \\{ 'fg' : 'cyan' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_LABEL' : \\{ 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_SUCCESS' : \\{ 'fg' : 'green' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_FAILURE' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  \\} ,  LIGHT_PALETTE : \\{  'ERROR' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  'WARNING' : \\{ 'fg' : 'yellow' , 'opts' : ( 'bold' , ) \\} ,  'NOTICE' : \\{ 'fg' : 'red' \\} ,  'SQL_FIELD' : \\{ 'fg' : 'green' , 'opts' : ( 'bold' , ) \\} ,  'SQL_COLTYPE' : \\{ 'fg' : 'green' \\} ,  'SQL_KEYWORD' : \\{ 'fg' : 'blue' \\} ,  'SQL_TABLE' : \\{ 'opts' : ( 'bold' , ) \\} ,  'HTTP_INFO' : \\{ 'opts' : ( 'bold' , ) \\} ,  'HTTP_SUCCESS' : \\{ \\} ,  'HTTP_REDIRECT' : \\{ 'fg' : 'green' , 'opts' : ( 'bold' , ) \\} ,  'HTTP_NOT_MODIFIED' : \\{ 'fg' : 'green' \\} ,  'HTTP_BAD_REQUEST' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  'HTTP_NOT_FOUND' : \\{ 'fg' : 'red' \\} ,  'HTTP_SERVER_ERROR' : \\{ 'fg' : 'magenta' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_HEADING' : \\{ 'fg' : 'cyan' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_LABEL' : \\{ 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_SUCCESS' : \\{ 'fg' : 'green' , 'opts' : ( 'bold' , ) \\} ,  'MIGRATE_FAILURE' : \\{ 'fg' : 'red' , 'opts' : ( 'bold' , ) \\} ,  \\}  \\}"}
{"intent": "a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.", "snippet": "DEFAULT_PALETTE = DARK_PALETTE"}
{"intent": "define the function parse_color_setting with an argument config_string.", "snippet": "def parse_color_setting ( config_string ) :"}
{"intent": "if config_string is false,", "snippet": "if not config_string :"}
{"intent": "return value under the DEFAULT_PALETTE key of the PALETTES dictionary.", "snippet": "return PALETTES [ DEFAULT_PALETTE ]"}
{"intent": "convert config_string to lowercase and split it by ';' character, substitute the result for parts.", "snippet": "parts = config_string . lower ( ) . split ( ';' )"}
{"intent": "get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.", "snippet": "palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )"}
{"intent": "for every part in parts,", "snippet": "for part in parts :"}
{"intent": "if part is contained in PALETTES,", "snippet": "if part in PALETTES :"}
{"intent": "get the value under the part key of the PALETTES dictionary, update with it palette dictionary.", "snippet": "palette . update ( PALETTES [ part ] )"}
{"intent": "otherwise if '=' is contained in part,", "snippet": "elif '=' in part :"}
{"intent": "definition is an empty dictionary,", "snippet": "definition = \\{ \\}"}
{"intent": "split part by '=' character, substitute the result for role and instructions, respectively.", "snippet": "role , instructions = part . split ( '=' )"}
{"intent": "convert role to uppercase.", "snippet": "role = role . upper ( )"}
{"intent": "split instructions by ',' character, substitute the result for styles.", "snippet": "styles = instructions . split ( ',' )"}
{"intent": "reverse the order of elements of styles.", "snippet": "styles . reverse ( )"}
{"intent": "remove first element from styles, split it by the '/' character, substitute the result for colors.", "snippet": "colors = styles . pop ( ) . split ( '/' )"}
{"intent": "reverse the order of colors elements,", "snippet": "colors . reverse ( )"}
{"intent": "remove the first element from colors, substitute it for fg.", "snippet": "fg = colors . pop ( )"}
{"intent": "if fg is contained in color_names,", "snippet": "if fg in color_names :"}
{"intent": "substitute fg for value under the 'fg' key of definition dictionary.", "snippet": "definition [ 'fg' ] = fg"}
{"intent": "if colors is true and last element of colors is contained in color_names,", "snippet": "if colors and colors [ - 1 ] in color_names :"}
{"intent": "substitute last element of colors for value under the 'bg' key of definition dictionary.", "snippet": "definition [ 'bg' ] = colors [ - 1 ]"}
{"intent": "opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.", "snippet": "opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )"}
{"intent": "if opts is true,", "snippet": "if opts :"}
{"intent": "substitute opts for value under the 'opts' key of definition dictionary.", "snippet": "definition [ 'opts' ] = opts"}
{"intent": "if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,", "snippet": "if role in PALETTES [ NOCOLOR_PALETTE ] and definition :"}
{"intent": "substitute definition for value under the role key of palette dictionary.", "snippet": "palette [ role ] = definition"}
{"intent": "if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,", "snippet": "if palette == PALETTES [ NOCOLOR_PALETTE ] :"}
{"intent": "return None.", "snippet": "return None"}
{"intent": "return palette.", "snippet": "return palette"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "import module re.", "snippet": "import re"}
{"intent": "import module unicodedata.", "snippet": "import unicodedata"}
{"intent": "from gzip import GzipFile into default name space.", "snippet": "from gzip import GzipFile"}
{"intent": "from io import BytesIO into default name space.", "snippet": "from io import BytesIO"}
{"intent": "import module warnings.", "snippet": "import warnings"}
{"intent": "from django.utils.deprecation import RemovedInDjango19Warning into default name space.", "snippet": "from django . utils . deprecation import RemovedInDjango19Warning"}
{"intent": "from django.utils.encoding import force_text into default name space.", "snippet": "from django . utils . encoding import force_text"}
{"intent": "from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.", "snippet": "from django . utils . functional import allow_lazy , SimpleLazyObject"}
{"intent": "from django.utils import six into default name space.", "snippet": "from django . utils import six"}
{"intent": "from django.utils.six.moves import html_entities into default name space.", "snippet": "from django . utils . six . moves import html_entities"}
{"intent": "from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.", "snippet": "from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext"}
{"intent": "from django.utils.safestring import mark_safe into default name space.", "snippet": "from django . utils . safestring import mark_safe"}
{"intent": "if six.PY2 is true,", "snippet": "if six . PY2 :"}
{"intent": "from django.utils.encoding import force_unicode.", "snippet": "from django . utils . encoding import force_unicode"}
{"intent": "if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,", "snippet": "capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]"}
{"intent": "convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.", "snippet": "capfirst = allow_lazy ( capfirst , six . text_type )"}
{"intent": "call the function re.compile with 2 arguments: raw string '<.*?>|((?:\\w[-\\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,", "snippet": "re_words = re . compile ( r'<.*?>|((?:\\w[-\\w]*|&.*?;)+)' , re . U | re . S )"}
{"intent": "re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,", "snippet": "re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )"}
{"intent": "re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\\s*/)| .*?)?>' and bitwise OR performed with 2 operands,", "snippet": "re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\\s*/)| .*?)?>' , re . S )"}
{"intent": "re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\\r\\n|\\r', substitute the result for re_newlines.", "snippet": "re_newlines = re . compile ( r'\\r\\n|\\r' )"}
{"intent": "call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.", "snippet": "re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )"}
{"intent": "define the function wrap with 2 arguments text and width.", "snippet": "def wrap ( text , width ) :"}
{"intent": "call the function force_text with an argument text, substitute the result for text.", "snippet": "text = force_text ( text )"}
{"intent": "define the function _generator.", "snippet": "def _generator ( ) :"}
{"intent": "call the method text.splitlines with an argument boolean True, for every line in the result,", "snippet": "for line in text . splitlines ( True ) :"}
{"intent": "if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.", "snippet": "max_width = min ( ( line . endswith ( '\\n' ) and width + 1 or width ) , width )"}
{"intent": "while length of line is grater than max_width,", "snippet": "while len ( line ) > max_width :"}
{"intent": "get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,", "snippet": "space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1"}
{"intent": "add integer 1 to it, substitute the result for space.   if space equals integer 0,", "snippet": "if space == 0 :"}
{"intent": "find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.", "snippet": "space = line . find ( ' ' ) + 1"}
{"intent": "if space equals integer 0,", "snippet": "if space == 0 :"}
{"intent": "yield line.", "snippet": "yield line"}
{"intent": "line is an empty string.", "snippet": "line = ''"}
{"intent": "break from the loop execution", "snippet": "break"}
{"intent": "get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.", "snippet": "yield '%s\\n' % line [ : space - 1 ]"}
{"intent": "remove all the elements from space index of line.", "snippet": "line = line [ space : ]"}
{"intent": "if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.", "snippet": "max_width = min ( ( line . endswith ( '\\n' ) and width + 1 or width ) , width )"}
{"intent": "if line is true,", "snippet": "if line :"}
{"intent": "yield line.", "snippet": "yield line"}
{"intent": "call the function _generator, join the result into a string, return the result.", "snippet": "return '' . join ( _generator ( ) )"}
{"intent": "call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.", "snippet": "wrap = allow_lazy ( wrap , six . text_type )"}
{"intent": "derive the class Truncator form the SimpleLazyObject class.", "snippet": "class Truncator ( SimpleLazyObject ) :"}
{"intent": "define the method __init__ with 2 arguments: self and text.", "snippet": "def __init__ ( self , text ) :"}
{"intent": "call the method __init__ from the base class of the class Truncator,", "snippet": "super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )"}
{"intent": "called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.", "snippet": "def add_truncation_text ( self , text , truncate = None ) :"}
{"intent": "if truncate is None,", "snippet": "if truncate is None :"}
{"intent": "call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.", "snippet": "truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )"}
{"intent": "call the function force_text with an argument truncate, substitute the result for truncate.", "snippet": "truncate = force_text ( truncate )"}
{"intent": "if string '%(truncated_text)s' is contained in truncate,", "snippet": "if '%(truncated_text)s' in truncate :"}
{"intent": "format truncate with a dictionary with an element: text for 'truncated_text', return the result.", "snippet": "return truncate % \\{ 'truncated_text' : text \\}"}
{"intent": "if text ends with truncate,", "snippet": "if text . endswith ( truncate ) :"}
{"intent": "return text.", "snippet": "return text"}
{"intent": "append truncate to text, return the result.", "snippet": "return '%s%s' % ( text , truncate )"}
{"intent": "define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.", "snippet": "def chars ( self , num , truncate = None , html = False ) :"}
{"intent": "convert num to an integer, substitute it for length.", "snippet": "length = int ( num )"}
{"intent": "call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.", "snippet": "text = unicodedata . normalize ( 'NFC' , self . _wrapped )"}
{"intent": "substitute length for truncate_len.", "snippet": "truncate_len = length"}
{"intent": "for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.", "snippet": "for char in self . add_truncation_text ( '' , truncate ) :"}
{"intent": "call the method unicodedata.combining with an argument char, if it evaluates to false,", "snippet": "if not unicodedata . combining ( char ) :"}
{"intent": "decrement truncate_len by integer 1.", "snippet": "truncate_len -= 1"}
{"intent": "if truncate_len equals integer 0.", "snippet": "if truncate_len == 0 :"}
{"intent": "break from the loop execution.", "snippet": "break"}
{"intent": "if html is true,", "snippet": "if html :"}
{"intent": "call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.", "snippet": "return self . _truncate_html ( length , truncate , text , truncate_len , False )"}
{"intent": "call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.", "snippet": "return self . _text_chars ( length , truncate , text , truncate_len )"}
{"intent": "call the function allow_lazy with an argument chars, substitute the result for chars.", "snippet": "chars = allow_lazy ( chars )"}
{"intent": "define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.", "snippet": "def _text_chars ( self , length , truncate , text , truncate_len ) :"}
{"intent": "s_len is integer 0.", "snippet": "s_len = 0"}
{"intent": "end_index is None.", "snippet": "end_index = None"}
{"intent": "for every i and char in enumerated text,", "snippet": "for i , char in enumerate ( text ) :"}
{"intent": "call the function unicodedata.combining with an argument char, if it evaluates to true,", "snippet": "if unicodedata . combining ( char ) :"}
{"intent": "skip this loop iteration,s", "snippet": "continue"}
{"intent": "increment s_len by integer 1,", "snippet": "s_len += 1"}
{"intent": "if end_index is None and s_len is greater than truncate_len,", "snippet": "if end_index is None and s_len > truncate_len :"}
{"intent": "substitute i for end_index.", "snippet": "end_index = i"}
{"intent": "if s_len is greater than length,", "snippet": "if s_len > length :"}
{"intent": "call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,", "snippet": "return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )"}
{"intent": "if not an empty string, and truncate, return the result.   return text.", "snippet": "return text"}
{"intent": "define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.", "snippet": "def words ( self , num , truncate = None , html = False ) :"}
{"intent": "convert num to an integer, substitute the result for length.", "snippet": "length = int ( num )"}
{"intent": "if html is true,", "snippet": "if html :"}
{"intent": "call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.", "snippet": "return self . _truncate_html ( length , truncate , self . _wrapped , length , True )"}
{"intent": "call the method self._text_words with 2 arguments length and truncate, return the result.", "snippet": "return self . _text_words ( length , truncate )"}
{"intent": "call the function allow_lazy with an argument words, substitute the result for words.", "snippet": "words = allow_lazy ( words )"}
{"intent": "define the method _text_words with 3 arguments: self, length and truncate.", "snippet": "def _text_words ( self , length , truncate ) :"}
{"intent": "split self._wrapped into words, substitute the result for words.", "snippet": "words = self . _wrapped . split ( )"}
{"intent": "if length of words is greater than length,", "snippet": "if len ( words ) > length :"}
{"intent": "substitute first length elements of words for words.", "snippet": "words = words [ : length ]"}
{"intent": "call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,", "snippet": "return self . add_truncation_text ( ' ' . join ( words ) , truncate )"}
{"intent": "and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.", "snippet": "return ' ' . join ( words )"}
{"intent": "define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.", "snippet": "def _truncate_html ( self , length , truncate , text , truncate_len , words ) :"}
{"intent": "if words is not empty and length is smaller than or equal to integer 0,", "snippet": "if words and length <= 0 :"}
{"intent": "return an empty string.", "snippet": "return ''"}
{"intent": "html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.", "snippet": "html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )"}
{"intent": "pos is equal to integer 0.", "snippet": "pos = 0"}
{"intent": "end_text_pos is equal to integer 0.", "snippet": "end_text_pos = 0"}
{"intent": "current_len is equal to integer 0.", "snippet": "current_len = 0"}
{"intent": "open_tags is an empty list.", "snippet": "open_tags = [ ]"}
{"intent": "if words is true, substitute re_words for regex, if not substitute re_chars for regex.", "snippet": "regex = re_words if words else re_chars"}
{"intent": "while current_len is smaller than or equal to length,", "snippet": "while current_len <= length :"}
{"intent": "call the method regex.search with 2 arguments: text and pos.", "snippet": "m = regex . search ( text , pos )"}
{"intent": "if m is false,", "snippet": "if not m :"}
{"intent": "break from the loop execution,", "snippet": "break"}
{"intent": "call the method m.end with an argument integer 0, substitute the result for pos.", "snippet": "pos = m . end ( 0 )"}
{"intent": "call the function m.group, if the result evaluates to true,", "snippet": "if m . group ( 1 ) :"}
{"intent": "increment current_len by integer 1,", "snippet": "current_len += 1"}
{"intent": "if current_len equals truncate_len,", "snippet": "if current_len == truncate_len :"}
{"intent": "substitute pos for end_text_pos.", "snippet": "end_text_pos = pos"}
{"intent": "skip this loop iteration.", "snippet": "continue"}
{"intent": "call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,", "snippet": "tag = re_tag . match ( m . group ( 0 ) )"}
{"intent": "substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,", "snippet": "if not tag or current_len >= truncate_len :"}
{"intent": "skip this loop iteration.", "snippet": "continue"}
{"intent": "call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.", "snippet": "closing_tag , tagname , self_closing = tag . groups ( )"}
{"intent": "convert tagname to lowercase, substitute it for tagname.", "snippet": "tagname = tagname . lower ( )"}
{"intent": "if self_closing is true or tagname is contained in html4_singlets,", "snippet": "if self_closing or tagname in html4_singlets :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "otherwise if closing_tag is true,", "snippet": "elif closing_tag :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "get the index of the first occurrence of tagname, substitute it for i.", "snippet": "i = open_tags . index ( tagname )"}
{"intent": "if ValueError exception is caught,", "snippet": "except ValueError :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.", "snippet": "open_tags = open_tags [ i + 1 : ]"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "insert tagname at the beginning of open_tags.", "snippet": "open_tags . insert ( 0 , tagname )"}
{"intent": "if current_len is smaller than or equal to length,", "snippet": "if current_len <= length :"}
{"intent": "return text.", "snippet": "return text"}
{"intent": "create a list out of fist end_text_pos text elemnts, substitue it for out.", "snippet": "out = text [ : end_text_pos ]"}
{"intent": "call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.", "snippet": "truncate_text = self . add_truncation_text ( '' , truncate )"}
{"intent": "if truncate_text is true,", "snippet": "if truncate_text :"}
{"intent": "append truncate_text to out.", "snippet": "out += truncate_text"}
{"intent": "for every tag in open_tags,", "snippet": "for tag in open_tags :"}
{"intent": "replace '%s' in string '</%s>' with tag, append the result to out.", "snippet": "out += '</%s>' % tag"}
{"intent": "return out.", "snippet": "return out"}
{"intent": "define the function get_valid_filename with an argument s.", "snippet": "def get_valid_filename ( s ) :"}
{"intent": "call the function force_text with an argument s, strip the result of whitespaces from both ends,", "snippet": "s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )"}
{"intent": "replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\\w.]', an empty string and s, return the result.", "snippet": "return re . sub ( r'(?u)[^-\\w.]' , '' , s )"}
{"intent": "call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.", "snippet": "get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )"}
{"intent": "define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.", "snippet": "def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :"}
{"intent": "is length of list_ equals integer 0,", "snippet": "if len ( list_ ) == 0 :"}
{"intent": "return an empty string.", "snippet": "return ''"}
{"intent": "if length of list_ equals integer 1,", "snippet": "if len ( list_ ) == 1 :"}
{"intent": "call the function force_text with first element of list_ as an argument, return the result.", "snippet": "return force_text ( list_ [ 0 ] )"}
{"intent": "return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,", "snippet": "return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )"}
{"intent": "separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.", "snippet": "get_text_list = allow_lazy ( get_text_list , six . text_type )"}
{"intent": "define the function normalize_newlines with an argument text.", "snippet": "def normalize_newlines ( text ) :"}
{"intent": "call the function force_text with an argument text, substitute the result for text.", "snippet": "text = force_text ( text )"}
{"intent": "call the method re_newlines.sub with 2 arguments: '\\n' and text, return the result.", "snippet": "return re_newlines . sub ( '\\n' , text )"}
{"intent": "call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.", "snippet": "normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )"}
{"intent": "define the function phone2numeric with an argument phone.", "snippet": "def phone2numeric ( phone ) :"}
{"intent": "char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',", "snippet": "char2number = \\{ 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' \\}"}
{"intent": "4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.", "snippet": "return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )"}
{"intent": "call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.", "snippet": "phone2numeric = allow_lazy ( phone2numeric )"}
{"intent": "define the function compress_string with an argument s.", "snippet": "def compress_string ( s ) :"}
{"intent": "zbuf is an instance of BytesIO class.", "snippet": "zbuf = BytesIO ( )"}
{"intent": "zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,", "snippet": "zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )"}
{"intent": "and fileobj set to zbuf.   call the method zfile.write with an argument s.", "snippet": "zfile . write ( s )"}
{"intent": "call the method zfile.close.", "snippet": "zfile . close ( )"}
{"intent": "call the method zbuf.getvalue, return the result.", "snippet": "return zbuf . getvalue ( )"}
{"intent": "derive the class StreamingBuffer from the object base class.", "snippet": "class StreamingBuffer ( object ) :"}
{"intent": "define the method __init__ with an argument self.", "snippet": "def __init__ ( self ) :"}
{"intent": "self.vals is an empty list.", "snippet": "self . vals = [ ]"}
{"intent": "define the method write with 2 arguments: self and val.", "snippet": "def write ( self , val ) :"}
{"intent": "append val to self.vals.", "snippet": "self . vals . append ( val )"}
{"intent": "define the method read with an argument self.", "snippet": "def read ( self ) :"}
{"intent": "join elements of self.vals into a bytes string, substitute the result for ret.", "snippet": "ret = b'' . join ( self . vals )"}
{"intent": "self.vals is an empty list.", "snippet": "self . vals = [ ]"}
{"intent": "return ret.", "snippet": "return ret"}
{"intent": "define the method flush with an argument self.", "snippet": "def flush ( self ) :"}
{"intent": "return nothing.", "snippet": "return"}
{"intent": "define the method close with an argument self.", "snippet": "def close ( self ) :"}
{"intent": "return nothing.", "snippet": "return"}
{"intent": "define the function compress_sequence with an argument sequence.", "snippet": "def compress_sequence ( sequence ) :"}
{"intent": "buf is an instance of StreamingBuffer class.", "snippet": "buf = StreamingBuffer ( )"}
{"intent": "zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,", "snippet": "zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )"}
{"intent": "and fileobj set to buf.   read data from buf file stream, yield the result.", "snippet": "yield buf . read ( )"}
{"intent": "for every item in sequence,", "snippet": "for item in sequence :"}
{"intent": "write item to zfile stream.", "snippet": "zfile . write ( item )"}
{"intent": "flush zfile stream buffer.", "snippet": "zfile . flush ( )"}
{"intent": "read data from buf, yield the result.", "snippet": "yield buf . read ( )"}
{"intent": "close zfile stream.", "snippet": "zfile . close ( )"}
{"intent": "read data from buf, yield the result.", "snippet": "yield buf . read ( )"}
{"intent": "call the function re.compile with an argument string '([\\u0080-\\uffff])', substitute the result for ustring_re.", "snippet": "ustring_re = re . compile ( '([\\u0080-\\uffff])' )"}
{"intent": "define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.", "snippet": "def javascript_quote ( s , quote_double_quotes = False ) :"}
{"intent": "msg is an string 'django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.'.", "snippet": "msg = (  'django.utils.text.javascript_quote() is deprecated. '  'Use django.utils.html.escapejs() instead.'  )"}
{"intent": "call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.", "snippet": "warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )"}
{"intent": "define the function fix with an argument match.", "snippet": "def fix ( match ) :"}
{"intent": "get the unicode representation of result of the method match.group called with an integer 1, format with in a string '\\\\u%04x',", "snippet": "return '\\\\u%04x' % ord ( match . group ( 1 ) )"}
{"intent": "return the result.   if type of s equals bytes,", "snippet": "if type ( s ) == bytes :"}
{"intent": "call the method s.decode with an argument string 'utf-8', substitute the result for s.", "snippet": "s = s . decode ( 'utf-8' )"}
{"intent": "otherwise if, type of s doesnt equal to six.text_type,", "snippet": "elif type ( s ) != six . text_type :"}
{"intent": "raise an TypeError with an argument s.", "snippet": "raise TypeError ( s )"}
{"intent": "replace every occurrence of '\\\\' in s with '\\\\\\\\'.", "snippet": "s = s . replace ( '\\\\' , '\\\\\\\\' )"}
{"intent": "replace every occurrence of '\\r' in s with '\\\\r'.", "snippet": "s = s . replace ( '\\r' , '\\\\r' )"}
{"intent": "replace every occurrence of '\\n' in s with '\\\\n'.", "snippet": "s = s . replace ( '\\n' , '\\\\n' )"}
{"intent": "replace every occurrence of '\\t' in s with '\\\\t'.", "snippet": "s = s . replace ( '\\t' , '\\\\t' )"}
{"intent": "replace every occurrence of ''' in s with '\\\\''.", "snippet": "s = s . replace ( ''' , '\\\\'' )"}
{"intent": "replace every occurrence of '</' in s with '<\\\\/'.", "snippet": "s = s . replace ( '</' , '<\\\\/' )"}
{"intent": "if quote_double_quotes is true,", "snippet": "if quote_double_quotes :"}
{"intent": "replace every occurrence of ''' in s with '&quot;'.", "snippet": "s = s . replace ( ''' , '&quot;' )"}
{"intent": "call the method ustring_re.sub with 2 arguments: fix and s, return the result.", "snippet": "return ustring_re . sub ( fix , s )"}
{"intent": "call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.", "snippet": "javascript_quote = allow_lazy ( javascript_quote , six . text_type )"}
{"intent": "call the function re.compile with 2 arguments: raw string '((?:[^\\s'']*(?:(?:'(?:[^'\\\\]|\\\\.)*' | '(?:[^'\\\\]|\\\\.)*')[^\\s'']*)+) | \\+)',", "snippet": "smart_split_re = re . compile ( r'''     ((?:         [^\\s'']*         (?:             (?:'(?:[^'\\\\]|\\\\.)*' | '(?:[^'\\\\]|\\\\.)*')             [^\\s'']*         )+     ) | \\S+) ''' , re . VERBOSE )"}
{"intent": "and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.", "snippet": "def smart_split ( text ) :"}
{"intent": "call the function force_text with an argument text, substitute the result for text.", "snippet": "text = force_text ( text )"}
{"intent": "call the method smart_split_re.finditer with an argument text, for every bit in result,", "snippet": "for bit in smart_split_re . finditer ( text ) :"}
{"intent": "call the method bit.group with an argument integer 0, yield the result.", "snippet": "yield bit . group ( 0 )"}
{"intent": "define the function _replace_entity with an argument match.", "snippet": "def _replace_entity ( match ) :"}
{"intent": "call the method match.group with an argument integer 1, substitute the result for text.", "snippet": "text = match . group ( 1 )"}
{"intent": "if first element of text equals '#',", "snippet": "if text [ 0 ] == '#' :"}
{"intent": "remove first element of text.", "snippet": "text = text [ 1 : ]"}
{"intent": "try,", "snippet": "try :"}
{"intent": "if first element of text is contained in 'xX'.", "snippet": "if text [ 0 ] in 'xX' :"}
{"intent": "convert text without first element to hexadecimal integer, substitute it for c.", "snippet": "c = int ( text [ 1 : ] , 16 )"}
{"intent": "if nor,", "snippet": "else :"}
{"intent": "convert text to an integer, substitute it for c.", "snippet": "c = int ( text )"}
{"intent": "call the method six.unichr with an argument c, return the result.", "snippet": "return six . unichr ( c )"}
{"intent": "if ValueError exception is caught,", "snippet": "except ValueError :"}
{"intent": "call the method match.group with an argument integer 0, return the result.", "snippet": "return match . group ( 0 )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.", "snippet": "return six . unichr ( html_entities . name2codepoint [ text ] )"}
{"intent": "if OverflowError or ValueError exceptions are caught,", "snippet": "except ( ValueError , KeyError ) :"}
{"intent": "call the method match.group with an argument integer 0, return the result.", "snippet": "return match . group ( 0 )"}
{"intent": "call the method re.compile with an argument raw string '&(#?[xX]?(?:[0-9a-fA-F]+|\\w\\{1,8\\}));', substitute the result for _entity_re.", "snippet": "_entity_re = re . compile ( r'&(#?[xX]?(?:[0-9a-fA-F]+|\\w\\{1,8\\}));' )"}
{"intent": "define the function unescape_entities with an argument text.", "snippet": "def unescape_entities ( text ) :"}
{"intent": "call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.", "snippet": "return _entity_re . sub ( _replace_entity , text )"}
{"intent": "call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.", "snippet": "unescape_entities = allow_lazy ( unescape_entities , six . text_type )"}
{"intent": "define the function unescape_string_literal with an argument s.", "snippet": "def unescape_string_literal ( s ) :"}
{"intent": "if first element of s is not contained in '\\''' or last element of s is not equal to first element of s,", "snippet": "if s [ 0 ] not in '\\''' or s [ - 1 ] != s [ 0 ] :"}
{"intent": "raise an ValueError exception wit an argument string 'Not a string literal: %r', where '%r' is replaced with s.", "snippet": "raise ValueError ( 'Not a string literal: %r' % s )"}
{"intent": "substitute first element of s for quote.", "snippet": "quote = s [ 0 ]"}
{"intent": "remove first and last elements of s, replace every occurrence of string '\\%s' formated with quote with quote,", "snippet": "return s [ 1 : - 1 ] . replace ( r'\\%s' % quote , quote ) . replace ( r'\\\\' , '\\\\' )"}
{"intent": "replace every occurrence of raw string '\\\\' in the result with string '\\\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.", "snippet": "unescape_string_literal = allow_lazy ( unescape_string_literal )"}
{"intent": "define the function slugify with an argument value.", "snippet": "def slugify ( value ) :"}
{"intent": "call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',", "snippet": "value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )"}
{"intent": "and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\\w\\s-]', empty string and value, strip the result of whitespaces from both ends,", "snippet": "value = re . sub ( '[^\\w\\s-]' , '' , value ) . strip ( ) . lower ( )"}
{"intent": "and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\\s]+', string '-' and value, use the result as an argument for the call to the,", "snippet": "return mark_safe ( re . sub ( '[-\\s]+' , '-' , value ) )"}
{"intent": "mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.", "snippet": "slugify = allow_lazy ( slugify , six . text_type )"}
{"intent": "define the function camel_case_to_spaces with an argument value.", "snippet": "def camel_case_to_spaces ( value ) :"}
{"intent": "call the method re_camel_case.sub with 2 arguments: raw string ' \\1' and value, strip the result of whitespaces from both ends,", "snippet": "return re_camel_case . sub ( r' \\1' , value ) . strip ( ) . lower ( )"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "import module datetime.", "snippet": "import datetime"}
{"intent": "from django.utils.html import avoid_wrapping into default name space.", "snippet": "from django . utils . html import avoid_wrapping"}
{"intent": "from django.utils.timezone import is_aware and utc into default name space.", "snippet": "from django . utils . timezone import is_aware , utc"}
{"intent": "from django.utils.translation import ugettext and ungettext_lazy into default name space.", "snippet": "from django . utils . translation import ugettext , ungettext_lazy"}
{"intent": "define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.", "snippet": "def timesince ( d , now = None , reversed = False ) :"}
{"intent": "chunks is a tuple containing 6 initial tuples:", "snippet": "chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )"}
{"intent": "result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,", "snippet": "if not isinstance ( d , datetime . datetime ) :"}
{"intent": "call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.", "snippet": "d = datetime . datetime ( d . year , d . month , d . day )"}
{"intent": "if now equals to boolean True and now is not an instance of datetime.datetime,", "snippet": "if now and not isinstance ( now , datetime . datetime ) :"}
{"intent": "call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.", "snippet": "now = datetime . datetime ( now . year , now . month , now . day )"}
{"intent": "if now is false,", "snippet": "if not now :"}
{"intent": "call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.", "snippet": "now = datetime . datetime . now ( utc if is_aware ( d ) else None )"}
{"intent": "if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.", "snippet": "delta = ( d - now ) if reversed else ( now - d )"}
{"intent": "multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.", "snippet": "since = delta . days * 24 * 60 * 60 + delta . seconds"}
{"intent": "if since is lesser or equal to integer 0,", "snippet": "if since <= 0 :"}
{"intent": "call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.", "snippet": "return avoid_wrapping ( ugettext ( '0 minutes' ) )"}
{"intent": "for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,", "snippet": "for i , ( seconds , name ) in enumerate ( chunks ) :"}
{"intent": "divide since by seconds, store the floored result in count.", "snippet": "count = since // seconds"}
{"intent": "if count does not equals to integer 0,", "snippet": "if count != 0 :"}
{"intent": "break the execution of the smallest enclosing loop.", "snippet": "break"}
{"intent": "use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.", "snippet": "result = avoid_wrapping ( name % count )"}
{"intent": "if i incremented by 1 is lesser than length of chunks,", "snippet": "if i + 1 < len ( chunks ) :"}
{"intent": "get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.", "snippet": "seconds2 , name2 = chunks [ i + 1 ]"}
{"intent": "multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.", "snippet": "count2 = ( since - ( seconds * count ) ) // seconds2"}
{"intent": "if count2 does not equals to integer 0,", "snippet": "if count2 != 0 :"}
{"intent": "call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.", "snippet": "result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "define the function timeuntil with 2 arguments, d and now defaulting to none.", "snippet": "def timeuntil ( d , now = None ) :"}
{"intent": "evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.", "snippet": "return timesince ( d , now , reversed = True )"}
{"intent": "from datetime import datetime,  timedelta and tzinfo into default name space.", "snippet": "from datetime import datetime , timedelta , tzinfo"}
{"intent": "from threading import local into default name space.", "snippet": "from threading import local"}
{"intent": "import module sys.", "snippet": "import sys"}
{"intent": "import module time as _time.", "snippet": "import time as _time"}
{"intent": "try,", "snippet": "try :"}
{"intent": "import pytz.", "snippet": "import pytz"}
{"intent": "if ImportError exception is caught,", "snippet": "except ImportError :"}
{"intent": "pytz is None.", "snippet": "pytz = None"}
{"intent": "from django.conf import settings into default name space.", "snippet": "from django . conf import settings"}
{"intent": "from django.utils import six into default name space.", "snippet": "from django . utils import six"}
{"intent": "__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',", "snippet": "__all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]"}
{"intent": "'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.", "snippet": "ZERO = timedelta ( 0 )"}
{"intent": "derive the class UTC from the tzinfo base class.", "snippet": "class UTC ( tzinfo ) :"}
{"intent": "define the method __repr__ with an argument self.", "snippet": "def __repr__ ( self ) :"}
{"intent": "return a string '<UTC>'.", "snippet": "return '<UTC>'"}
{"intent": "define the method utcoffset with 2 arguments self and dt.", "snippet": "def utcoffset ( self , dt ) :"}
{"intent": "return ZERO.", "snippet": "return ZERO"}
{"intent": "define the method tzname with 2 arguments self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "return a string 'UTC'.", "snippet": "return 'UTC'"}
{"intent": "define the method dst with 2 arguments self and dt.", "snippet": "def dst ( self , dt ) :"}
{"intent": "return ZERO.", "snippet": "return ZERO"}
{"intent": "derive the class FixedOffset from the tzinfo base class.", "snippet": "class FixedOffset ( tzinfo ) :"}
{"intent": "define the method __init__ with 3 arguments: self, offset set to None, name set to None.", "snippet": "def __init__ ( self , offset = None , name = None ) :"}
{"intent": "if offset is not None,", "snippet": "if offset is not None :"}
{"intent": "call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.", "snippet": "self . __offset = timedelta ( minutes = offset )"}
{"intent": "if name is not None,", "snippet": "if name is not None :"}
{"intent": "substitute name for self.__name.", "snippet": "self . __name = name"}
{"intent": "define the method utcoffset with 2 arguments: self and dt.", "snippet": "def utcoffset ( self , dt ) :"}
{"intent": "return self.__offset.", "snippet": "return self . __offset"}
{"intent": "define the method tzname with 2 arguments: self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "return self.__name.", "snippet": "return self . __name"}
{"intent": "define the method dst with 2 arguments: self and dt.", "snippet": "def dst ( self , dt ) :"}
{"intent": "return ZERO.", "snippet": "return ZERO"}
{"intent": "derive the class ReferenceLocalTimezone from the tzinfo base class.", "snippet": "class ReferenceLocalTimezone ( tzinfo ) :"}
{"intent": "define the method __init__ with an argument self.", "snippet": "def __init__ ( self ) :"}
{"intent": "call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.", "snippet": "self . STDOFFSET = timedelta ( seconds = - _time . timezone )"}
{"intent": "if _time.daylight is true,", "snippet": "if _time . daylight :"}
{"intent": "call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.", "snippet": "self . DSTOFFSET = timedelta ( seconds = - _time . altzone )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute self.STDOFFSET for self.DSTOFFSET.", "snippet": "self . DSTOFFSET = self . STDOFFSET"}
{"intent": "subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.", "snippet": "self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET"}
{"intent": "call the method tzinfo.__init__ with an argument self.", "snippet": "tzinfo . __init__ ( self )"}
{"intent": "define the method utcoffset with 2 arguments: self and dt.", "snippet": "def utcoffset ( self , dt ) :"}
{"intent": "call the method self._isdst with an argument dt, if it evaluates to true,", "snippet": "if self . _isdst ( dt ) :"}
{"intent": "return self.DSTOFFSET.", "snippet": "return self . DSTOFFSET"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "return self.STDOFFSET.", "snippet": "return self . STDOFFSET"}
{"intent": "define the method utcoffset with 2 arguments: self and dt.", "snippet": "def dst ( self , dt ) :"}
{"intent": "call the method self._isdst with an argument dt, if it evaluates to true,", "snippet": "if self . _isdst ( dt ) :"}
{"intent": "return self.DSTDIFF.", "snippet": "return self . DSTDIFF"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "return ZERO.", "snippet": "return ZERO"}
{"intent": "define the method tzname with 2 arguments: self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.", "snippet": "return _time . tzname [ self . _isdst ( dt ) ]"}
{"intent": "define the method _isdst with 2 arguments: self and dt.", "snippet": "def _isdst ( self , dt ) :"}
{"intent": "tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,", "snippet": "tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )"}
{"intent": "ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.", "snippet": "stamp = _time . mktime ( tt )"}
{"intent": "call the method _time.localtime with an argument stamp, substitute the result for tt.", "snippet": "tt = _time . localtime ( stamp )"}
{"intent": "if tt.tm_isdst is greater than integer 0, return the result.", "snippet": "return tt . tm_isdst > 0"}
{"intent": "derive the class LocalTimezone from the ReferenceLocalTimezone base class.", "snippet": "class LocalTimezone ( ReferenceLocalTimezone ) :"}
{"intent": "define the method tzname with 2 arguments: self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.", "snippet": "is_dst = False if dt is None else self . _isdst ( dt )"}
{"intent": "return the value under the is_dst key of the _time.tzname dictionary.", "snippet": "return _time . tzname [ is_dst ]"}
{"intent": "define the method _isdst with 2 arguments: self and dt.", "snippet": "def _isdst ( self , dt ) :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.", "snippet": "return super ( LocalTimezone , self ) . _isdst ( dt )"}
{"intent": "if OverflowError or ValueError, renamed to exc, exceptions are caught,", "snippet": "except ( OverflowError , ValueError ) as exc :"}
{"intent": "get the type of the exc object, substitute it for exc_type.", "snippet": "exc_type = type ( exc )"}
{"intent": "call the function exc_type with an argument string 'Unsupported value: %r. You should install pytz.', replace '%s' with dt,", "snippet": "exc_value = exc_type (  'Unsupported value: %r. You should install pytz.' % dt )"}
{"intent": "substitute the result for exc_value.   substitute exc for exc_value.__cause__.", "snippet": "exc_value . __cause__ = exc"}
{"intent": "call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.", "snippet": "six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )"}
{"intent": "if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.", "snippet": "utc = pytz . utc if pytz else UTC ( )"}
{"intent": "define the function get_fixed_timezone with an argument offset.", "snippet": "def get_fixed_timezone ( offset ) :"}
{"intent": "if offset is an instance of timedelta class,", "snippet": "if isinstance ( offset , timedelta ) :"}
{"intent": "substitute offset.seconds for offset.", "snippet": "offset = offset . seconds // 60"}
{"intent": "if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.", "snippet": "sign = '-' if offset < 0 else '+'"}
{"intent": "divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.", "snippet": "hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )"}
{"intent": "sum sign and hhmm, substitute the result for name.", "snippet": "name = sign + hhmm"}
{"intent": "return an instance of FixedOffset class, created with 2 arguments: offset and name.", "snippet": "return FixedOffset ( offset , name )"}
{"intent": "_localtime is None.", "snippet": "_localtime = None"}
{"intent": "define the function get_default_timezone.", "snippet": "def get_default_timezone ( ) :"}
{"intent": "use global variable _localtime.", "snippet": "global _localtime"}
{"intent": "if _localtime is None,", "snippet": "if _localtime is None :"}
{"intent": "if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,", "snippet": "if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :"}
{"intent": "call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.", "snippet": "_localtime = pytz . timezone ( settings . TIME_ZONE )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "_localtime is an instance of LocalTimezone class.", "snippet": "_localtime = LocalTimezone ( )"}
{"intent": "return _localtime.", "snippet": "return _localtime"}
{"intent": "define the function get_default_timezone_name.", "snippet": "def get_default_timezone_name ( ) :"}
{"intent": "call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.", "snippet": "return _get_timezone_name ( get_default_timezone ( ) )"}
{"intent": "call the method local, substitute the result for _active.", "snippet": "_active = local ( )"}
{"intent": "define the function get_current_timezone.", "snippet": "def get_current_timezone ( ) :"}
{"intent": "get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.", "snippet": "return getattr ( _active , 'value' , get_default_timezone ( ) )"}
{"intent": "define the function get_current_timezone_name.", "snippet": "def get_current_timezone_name ( ) :"}
{"intent": "call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.", "snippet": "return _get_timezone_name ( get_current_timezone ( ) )"}
{"intent": "define the function _get_timezone_name with an argument timezone.", "snippet": "def _get_timezone_name ( timezone ) :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "return timezone.zone.", "snippet": "return timezone . zone"}
{"intent": "if AttributeError exception is caught,", "snippet": "except AttributeError :"}
{"intent": "call the method timezone.tzname with an argument None, return the result.", "snippet": "return timezone . tzname ( None )"}
{"intent": "define the function activate with an argument timezone.", "snippet": "def activate ( timezone ) :"}
{"intent": "if timezone is an instance of tzinfo,", "snippet": "if isinstance ( timezone , tzinfo ) :"}
{"intent": "substitute timezone for _active.value.", "snippet": "_active . value = timezone"}
{"intent": "otherwise if timezone is an instance of six.string_types and pytz is not None,", "snippet": "elif isinstance ( timezone , six . string_types ) and pytz is not None :"}
{"intent": "call the method pytz.timezone with an argument timezone, substitute the result for _active.value.", "snippet": "_active . value = pytz . timezone ( timezone )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "raise an ValueError with an argument string 'Invalid timezone: %r', substitute '%r' with timezone.", "snippet": "raise ValueError ( 'Invalid timezone: %r' % timezone )"}
{"intent": "define the function deactivate.", "snippet": "def deactivate ( ) :"}
{"intent": "if active has an attribute 'value',", "snippet": "if hasattr ( _active , 'value' ) :"}
{"intent": "delete _active.value.", "snippet": "del _active . value"}
{"intent": "derive the class override from the object base class.", "snippet": "class override ( object ) :"}
{"intent": "define the method __init__ with 2 arguments: self and timezone.", "snippet": "def __init__ ( self , timezone ) :"}
{"intent": "substitute timezone for self.timezone.", "snippet": "self . timezone = timezone"}
{"intent": "get 'value' attribute of the _active object", "snippet": "self . old_timezone = getattr ( _active , 'value' , None )"}
{"intent": "define the method __enter__ with an argument self.", "snippet": "def __enter__ ( self ) :"}
{"intent": "if self.timezone is None,", "snippet": "if self . timezone is None :"}
{"intent": "call the method deactivate.", "snippet": "deactivate ( )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the method activate with an argument self.timezone.", "snippet": "activate ( self . timezone )"}
{"intent": "define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.", "snippet": "def __exit__ ( self , exc_type , exc_value , traceback ) :"}
{"intent": "if self.old_timezone is None,", "snippet": "if self . old_timezone is None :"}
{"intent": "call the method deactivate.", "snippet": "deactivate ( )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "substitute self.old_timezone for _active.value.", "snippet": "_active . value = self . old_timezone"}
{"intent": "define the function template_localtime with 2 arguments: value and use_tz set to None.", "snippet": "def template_localtime ( value , use_tz = None ) :"}
{"intent": "if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,", "snippet": "should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )"}
{"intent": "with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.", "snippet": "return localtime ( value ) if should_convert else value"}
{"intent": "define the function localtime with 2 arguments: value and timezone set to None.", "snippet": "def localtime ( value , timezone = None ) :"}
{"intent": "if timezone is None,", "snippet": "if timezone is None :"}
{"intent": "call the function get_current_timezone, substitute the result for timezone.", "snippet": "timezone = get_current_timezone ( )"}
{"intent": "call the method value.astimezone with an argument timezone, substitute the result for value.", "snippet": "value = value . astimezone ( timezone )"}
{"intent": "if timezone has an attribute 'normalize',", "snippet": "if hasattr ( timezone , 'normalize' ) :"}
{"intent": "call the method timezone.normalize with an argument value, substitute the result for value.", "snippet": "value = timezone . normalize ( value )"}
{"intent": "return value.", "snippet": "return value"}
{"intent": "define the function now.", "snippet": "def now ( ) :"}
{"intent": "if settings.USE_TZ is true,", "snippet": "if settings . USE_TZ :"}
{"intent": "call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.", "snippet": "return datetime . utcnow ( ) . replace ( tzinfo = utc )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the method datetime.now, return the result.", "snippet": "return datetime . now ( )"}
{"intent": "define the function is_aware with an argument value.", "snippet": "def is_aware ( value ) :"}
{"intent": "if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,", "snippet": "return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None"}
{"intent": "return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.", "snippet": "def is_naive ( value ) :"}
{"intent": "if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,", "snippet": "return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None"}
{"intent": "return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.", "snippet": "def make_aware ( value , timezone ) :"}
{"intent": "if timezone has an attribute 'localize',", "snippet": "if hasattr ( timezone , 'localize' ) :"}
{"intent": "call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.", "snippet": "return timezone . localize ( value , is_dst = None )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function is_aware with an argument value, if it evaluates to true,", "snippet": "if is_aware ( value ) :"}
{"intent": "raise an ValueError exception with an argument string 'make_aware expects a naive datetime, got %s', where '%s' is replaced with value.", "snippet": "raise ValueError (  'make_aware expects a naive datetime, got %s' % value )"}
{"intent": "call the method value.replace with an argument tzinfo as timezone, return the result.", "snippet": "return value . replace ( tzinfo = timezone )"}
{"intent": "define the function make_naive with 2 arguments: value and timezone.", "snippet": "def make_naive ( value , timezone ) :"}
{"intent": "call the method value.astimezone with an argument timezone, substitute the result for value.", "snippet": "value = value . astimezone ( timezone )"}
{"intent": "if timezone has an attribute 'normalize',", "snippet": "if hasattr ( timezone , 'normalize' ) :"}
{"intent": "call the method timezone.normalize with an argument value, substitute the result for value.", "snippet": "value = timezone . normalize ( value )"}
{"intent": "call the method value.replace with an arugment tzinfo set to None, return the result.", "snippet": "return value . replace ( tzinfo = None )"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "import module re.", "snippet": "import re"}
{"intent": "from django.utils.encoding import force_text into default name space.", "snippet": "from django . utils . encoding import force_text"}
{"intent": "from django.utils.functional import lazy into default name space.", "snippet": "from django . utils . functional import lazy"}
{"intent": "from django.utils import six into default name space.", "snippet": "from django . utils import six"}
{"intent": "__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',", "snippet": "__all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]"}
{"intent": "'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.", "snippet": "LANGUAGE_SESSION_KEY = '_language'"}
{"intent": "derive the class TranslatorCommentWarning from the SyntaxWarning base class.", "snippet": "class TranslatorCommentWarning ( SyntaxWarning ) :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "derive the class Trans from the object base class.", "snippet": "class Trans ( object ) :"}
{"intent": "define the method __getattr__ with 2 arguments: self and real_name.", "snippet": "def __getattr__ ( self , real_name ) :"}
{"intent": "from django.conf import settings.", "snippet": "from django . conf import settings"}
{"intent": "if settings.USE_I18N is true,", "snippet": "if settings . USE_I18N :"}
{"intent": "from django.utils.translation import trans_real as trans.", "snippet": "from django . utils . translation import trans_real as trans"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "from django.utils.translation import trans_null as trans.", "snippet": "from django . utils . translation import trans_null as trans"}
{"intent": "set real_name attribute of the self object to value of real_name attribute of trans object.", "snippet": "setattr ( self , real_name , getattr ( trans , real_name ) )"}
{"intent": "get attribute real_name from the trans object, return it.", "snippet": "return getattr ( trans , real_name )"}
{"intent": "_trans is an instance of Trans class.", "snippet": "_trans = Trans ( )"}
{"intent": "delete Trans.", "snippet": "del Trans"}
{"intent": "define the function gettext_noop with an argument message.", "snippet": "def gettext_noop ( message ) :"}
{"intent": "call the method _trans.gettext_noop with an argument message.", "snippet": "return _trans . gettext_noop ( message )"}
{"intent": "substitute gettext_noop for ugettext_noop.", "snippet": "ugettext_noop = gettext_noop"}
{"intent": "define the function gettext_noop with an argument message.", "snippet": "def gettext ( message ) :"}
{"intent": "call the method _trans.gettext with an argument message.", "snippet": "return _trans . gettext ( message )"}
{"intent": "define the function ngettext with 3 arguments: singular, plural and number.", "snippet": "def ngettext ( singular , plural , number ) :"}
{"intent": "call the method _trans.ngettext with 3 arguments singular, plural and number.", "snippet": "return _trans . ngettext ( singular , plural , number )"}
{"intent": "define the method ugettext with an argument message.", "snippet": "def ugettext ( message ) :"}
{"intent": "call the method _trans.gettext_noop with an argument message.", "snippet": "return _trans . ugettext ( message )"}
{"intent": "define the function ungettext with 3 arguments: singular, plural and number.", "snippet": "def ungettext ( singular , plural , number ) :"}
{"intent": "call the method _trans.ungettext with 3 arguments singular, plural and number.", "snippet": "return _trans . ungettext ( singular , plural , number )"}
{"intent": "define the function pgettext with 2 arguments: context and message.", "snippet": "def pgettext ( context , message ) :"}
{"intent": "call the method _trans.pgettext with 2 arguments context and message.", "snippet": "return _trans . pgettext ( context , message )"}
{"intent": "define the function npgettext with 4 arguments: context, singular, plural and number.", "snippet": "def npgettext ( context , singular , plural , number ) :"}
{"intent": "call the method _trans.npgettext with 4 arguments context, singular, plural and number.", "snippet": "return _trans . npgettext ( context , singular , plural , number )"}
{"intent": "call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.", "snippet": "gettext_lazy = lazy ( gettext , str )"}
{"intent": "call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.", "snippet": "ugettext_lazy = lazy ( ugettext , six . text_type )"}
{"intent": "call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.", "snippet": "pgettext_lazy = lazy ( pgettext , six . text_type )"}
{"intent": "define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.", "snippet": "def lazy_number ( func , resultclass , number = None , ** kwargs ) :"}
{"intent": "if number is an instance of int type.", "snippet": "if isinstance ( number , int ) :"}
{"intent": "substitute number for value under the 'number' key of the kwargs dictionary.", "snippet": "kwargs [ 'number' ] = number"}
{"intent": "call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,", "snippet": "proxy = lazy ( func , resultclass ) ( ** kwargs )"}
{"intent": "substitute the result for proxy.   if not,", "snippet": "else :"}
{"intent": "derive the class NumberAwareString from the resultclass base class.", "snippet": "class NumberAwareString ( resultclass ) :"}
{"intent": "define the method __mod__ with 2 arguments: self and rhs.", "snippet": "def __mod__ ( self , rhs ) :"}
{"intent": "if rhs is an instance of dict type and number is true,", "snippet": "if isinstance ( rhs , dict ) and number :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "substitute value under the number key of the rhs dictionary for number_value.", "snippet": "number_value = rhs [ number ]"}
{"intent": "if KeyError exception is caught,", "snippet": "except KeyError :"}
{"intent": "raise an KeyError with an argument string 'Your dictionary lacks key \\'%s\\'. Please provide it, because it is required to '", "snippet": "raise KeyError ( 'Your dictionary lacks key \\'%s\\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )"}
{"intent": "'determine whether string is singular or plural.', where '%s' is replaced with number.   if not,", "snippet": "else :"}
{"intent": "substitute rhs for number_value.", "snippet": "number_value = rhs"}
{"intent": "substitute number_value for kwargs dictionary value under the 'number' key.", "snippet": "kwargs [ 'number' ] = number_value"}
{"intent": "call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.", "snippet": "translated = func ( ** kwargs )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "format translated with rhs, substitute the result for translated.", "snippet": "translated = translated % rhs"}
{"intent": "if TypeError exception is caught,", "snippet": "except TypeError :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "return translated.", "snippet": "return translated"}
{"intent": "call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.", "snippet": "proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )"}
{"intent": "return proxy.", "snippet": "return proxy"}
{"intent": "define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.", "snippet": "def ngettext_lazy ( singular , plural , number = None ) :"}
{"intent": "call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,", "snippet": "return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )"}
{"intent": "and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.", "snippet": "def ungettext_lazy ( singular , plural , number = None ) :"}
{"intent": "call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,", "snippet": "return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )"}
{"intent": "and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.", "snippet": "def npgettext_lazy ( context , singular , plural , number = None ) :"}
{"intent": "call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,", "snippet": "return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )"}
{"intent": "plural set to plural and number set to number, return the result.   define the function activate with an argument language.", "snippet": "def activate ( language ) :"}
{"intent": "call the function _trans.activate with an argument language, return the result.", "snippet": "return _trans . activate ( language )"}
{"intent": "define the function deactivate.", "snippet": "def deactivate ( ) :"}
{"intent": "call the function _trans.deactivate, return the result.", "snippet": "return _trans . deactivate ( )"}
{"intent": "derive the class override from the object base class.", "snippet": "class override ( object ) :"}
{"intent": "define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.", "snippet": "def __init__ ( self , language , deactivate = False ) :"}
{"intent": "substitute language for self.language.", "snippet": "self . language = language"}
{"intent": "substitute deactivate for self.deactivate.", "snippet": "self . deactivate = deactivate"}
{"intent": "call the function get_language, substitute the result for self.old_language.", "snippet": "self . old_language = get_language ( )"}
{"intent": "define the method __enter__ with an argument self.", "snippet": "def __enter__ ( self ) :"}
{"intent": "if self.language is not None,", "snippet": "if self . language is not None :"}
{"intent": "call the function activate with an argument self.language.", "snippet": "activate ( self . language )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function deactivate_all.", "snippet": "deactivate_all ( )"}
{"intent": "define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.", "snippet": "def __exit__ ( self , exc_type , exc_value , traceback ) :"}
{"intent": "if self.deactivate is true,", "snippet": "if self . deactivate :"}
{"intent": "call the method deactivate.", "snippet": "deactivate ( )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the method activate with an argument self.old_language.", "snippet": "activate ( self . old_language )"}
{"intent": "define the function get_language.", "snippet": "def get_language ( ) :"}
{"intent": "call the function _trans.get_language, return the result.", "snippet": "return _trans . get_language ( )"}
{"intent": "define the function get_language_bidi.", "snippet": "def get_language_bidi ( ) :"}
{"intent": "call the function _trans.get_language_bidi, return the result.", "snippet": "return _trans . get_language_bidi ( )"}
{"intent": "define the function check_for_language with an argument lang_code.", "snippet": "def check_for_language ( lang_code ) :"}
{"intent": "call the function _trans.check_for_language with an argument lang_code, return the result.", "snippet": "return _trans . check_for_language ( lang_code )"}
{"intent": "define the function to_locale with an argument language.", "snippet": "def to_locale ( language ) :"}
{"intent": "call the function _trans.to_locale with an argument language, return the result.", "snippet": "return _trans . to_locale ( language )"}
{"intent": "define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.", "snippet": "def get_language_from_request ( request , check_path = False ) :"}
{"intent": "call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.", "snippet": "return _trans . get_language_from_request ( request , check_path )"}
{"intent": "define the function get_language_from_path with an argument path.", "snippet": "def get_language_from_path ( path ) :"}
{"intent": "call the function _trans.get_language_from_path with an argument path, return the result.", "snippet": "return _trans . get_language_from_path ( path )"}
{"intent": "define the function templatize with 2 arguments: src and origin set to None.", "snippet": "def templatize ( src , origin = None ) :"}
{"intent": "call the function _trans.templatize with 2 arguments: src and origin, return the result.", "snippet": "return _trans . templatize ( src , origin )"}
{"intent": "define the function deactivate_all.", "snippet": "def deactivate_all ( ) :"}
{"intent": "call the function _trans.deactivate_all, return the result.", "snippet": "return _trans . deactivate_all ( )"}
{"intent": "define the function _string_concat with an argument unpacked list strings.", "snippet": "def _string_concat ( * strings ) :"}
{"intent": "for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.", "snippet": "return '' . join ( force_text ( s ) for s in strings )"}
{"intent": "call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.", "snippet": "string_concat = lazy ( _string_concat , six . text_type )"}
{"intent": "define the function get_language_info with an argument lang_code.", "snippet": "def get_language_info ( lang_code ) :"}
{"intent": "from django.conf.locale import LANG_INFO.", "snippet": "from django . conf . locale import LANG_INFO"}
{"intent": "try,", "snippet": "try :"}
{"intent": "get the value under the lang_code key of the LANG_INFO dictionary, return it.", "snippet": "return LANG_INFO [ lang_code ]"}
{"intent": "if KeyError exception is caught,", "snippet": "except KeyError :"}
{"intent": "if character '-' is not contained  in lang_code,", "snippet": "if '-' not in lang_code :"}
{"intent": "raise an KeyError with an argument 'Unknown language code %s.', where '%s' is replaced with lang_code.", "snippet": "raise KeyError ( 'Unknown language code %s.' % lang_code )"}
{"intent": "split lang_code by character '-', substitute the first element of the result for generic_lang_code.", "snippet": "generic_lang_code = lang_code . split ( '-' ) [ 0 ]"}
{"intent": "try,", "snippet": "try :"}
{"intent": "get the LANG_INFO dictionary value under the generic_lang_code key, return the result.", "snippet": "return LANG_INFO [ generic_lang_code ]"}
{"intent": "if KeyError exception is caught,", "snippet": "except KeyError :"}
{"intent": "raise an KeyError with an argument string 'Unknown language code %s and %s.', where '%s' is replaced with lang_code,", "snippet": "raise KeyError ( 'Unknown language code %s and %s.' % ( lang_code , generic_lang_code ) )"}
{"intent": "and generic_lang_code.   call the function re.compile with an argument string '\\s*\\n\\s*', substitute the result for trim_whitespace_re.", "snippet": "trim_whitespace_re = re . compile ( '\\s*\\n\\s*' )"}
{"intent": "define the function trim_whitespace with an argument s.", "snippet": "def trim_whitespace ( s ) :"}
{"intent": "call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.", "snippet": "return trim_whitespace_re . sub ( ' ' , s . strip ( ) )"}
{"intent": "from django.conf import settings into default name space.", "snippet": "from django . conf import settings"}
{"intent": "from django.utils.encoding import force_text into default name space.", "snippet": "from django . utils . encoding import force_text"}
{"intent": "from django.utils.safestring import mark_safe and SafeData into default name space.", "snippet": "from django . utils . safestring import mark_safe , SafeData"}
{"intent": "define the function ngettext with 3 arguments: singular, plural and number.", "snippet": "def ngettext ( singular , plural , number ) :"}
{"intent": "if number equals integer 1,", "snippet": "if number == 1 :"}
{"intent": "return singular.", "snippet": "return singular"}
{"intent": "return plural.", "snippet": "return plural"}
{"intent": "substitute ngettext for ngettext_lazy.", "snippet": "ngettext_lazy = ngettext"}
{"intent": "define the function ungettext with 3 arguments: singular, plural and number.", "snippet": "def ungettext ( singular , plural , number ) :"}
{"intent": "call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,", "snippet": "return force_text ( ngettext ( singular , plural , number ) )"}
{"intent": "return the result.   define the function pgettext with 2 arguments: context and message.", "snippet": "def pgettext ( context , message ) :"}
{"intent": "call the function ugettext with an argument message.", "snippet": "return ugettext ( message )"}
{"intent": "define the function ngettext with 4 arguments: context, singular, plural and number.", "snippet": "def npgettext ( context , singular , plural , number ) :"}
{"intent": "call the function ungettext with 3 arguments: singular, plural and number, return the result.", "snippet": "return ungettext ( singular , plural , number )"}
{"intent": "activate is a lambda function which returns None for any argument x.", "snippet": "activate = lambda x : None"}
{"intent": "deactivate and deactivate_all are lambda functions returning None.", "snippet": "deactivate = deactivate_all = lambda : None"}
{"intent": "get_language is a lambda function returning settings.LANGUAGE_CODE.", "snippet": "get_language = lambda : settings . LANGUAGE_CODE"}
{"intent": "get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.", "snippet": "get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI"}
{"intent": "check_for_language is lambda function that returns boolean True for every argument x.", "snippet": "check_for_language = lambda x : True"}
{"intent": "define the function gettext with an argument message.", "snippet": "def gettext ( message ) :"}
{"intent": "if message is an instance of SafeData.", "snippet": "if isinstance ( message , SafeData ) :"}
{"intent": "call the function mark_safe with an argument message, return the result.", "snippet": "return mark_safe ( message )"}
{"intent": "return message.", "snippet": "return message"}
{"intent": "define the function ugettext with an argument message.", "snippet": "def ugettext ( message ) :"}
{"intent": "call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.", "snippet": "return force_text ( gettext ( message ) )"}
{"intent": "substitute gettext for gettext_noop, gettext_lazy and _.", "snippet": "gettext_noop = gettext_lazy = _ = gettext"}
{"intent": "define the function to_locale with an argument language.", "snippet": "def to_locale ( language ) :"}
{"intent": "find position of '-' in the index of the language, substitute the result for p.", "snippet": "p = language . find ( '-' )"}
{"intent": "if p is greater or equal to integer 0,", "snippet": "if p >= 0 :"}
{"intent": "append '_' to string created from first p elements of languages converted to lowercase,", "snippet": "return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )"}
{"intent": "convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,", "snippet": "else :"}
{"intent": "convert language to lowercase and return it.", "snippet": "return language . lower ( )"}
{"intent": "define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.", "snippet": "def get_language_from_request ( request , check_path = False ) :"}
{"intent": "return settings.LANGUAGE_CODE.", "snippet": "return settings . LANGUAGE_CODE"}
{"intent": "define the function get_language_from_path with an argument request.", "snippet": "def get_language_from_path ( request ) :"}
{"intent": "return None.", "snippet": "return None"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "from collections import OrderedDict into default name space.", "snippet": "from collections import OrderedDict"}
{"intent": "import module os.", "snippet": "import os"}
{"intent": "import module re.", "snippet": "import re"}
{"intent": "import module sys.", "snippet": "import sys"}
{"intent": "import module gettext as gettext_module.", "snippet": "import gettext as gettext_module"}
{"intent": "from threading import local into default name space.", "snippet": "from threading import local"}
{"intent": "import module warnings.", "snippet": "import warnings"}
{"intent": "from django.apps import apps into default name space.", "snippet": "from django . apps import apps"}
{"intent": "from django.conf import settings into default name space.", "snippet": "from django . conf import settings"}
{"intent": "from django.core.exceptions import AppRegistryNotReady into default name space.", "snippet": "from django . core . exceptions import AppRegistryNotReady"}
{"intent": "from django.dispatch import receiver into default name space.", "snippet": "from django . dispatch import receiver"}
{"intent": "from django.test.signals import setting_changed into default name space.", "snippet": "from django . test . signals import setting_changed"}
{"intent": "from django.utils.deprecation import RemovedInDjango19Warning into default name space.", "snippet": "from django . utils . deprecation import RemovedInDjango19Warning"}
{"intent": "from django.utils.encoding import force_text into default name space.", "snippet": "from django . utils . encoding import force_text"}
{"intent": "from django.utils._os import upath into default name space.", "snippet": "from django . utils . _os import upath"}
{"intent": "from django.utils.safestring import mark_safe and SafeData into default name space.", "snippet": "from django . utils . safestring import mark_safe , SafeData"}
{"intent": "from django.utils import six and lru_cache into default name space.", "snippet": "from django . utils import six , lru_cache"}
{"intent": "from django.utils.six import StringIO into default name space.", "snippet": "from django . utils . six import StringIO"}
{"intent": "from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.", "snippet": "from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY"}
{"intent": "_translations is an empty dictionary.", "snippet": "_translations = \\{ \\}"}
{"intent": "call the function local, substitute the result for _active.", "snippet": "_active = local ( )"}
{"intent": "_default is None.", "snippet": "_default = None"}
{"intent": "_supported is None.", "snippet": "_supported = None"}
{"intent": "CONTEXT_SEPARATOR is a string '\\x04'.", "snippet": "CONTEXT_SEPARATOR = '\\x04'"}
{"intent": "call the function re.compile with 2 arguments: raw string '([A-Za-z]\\{1,8\\}(?:-[A-Za-z0-9]\\{1,8\\})*|\\*)(?:\\s*;\\s*q=(0(?:\\.\\d\\{,3\\})?|1(?:.0\\{,3\\})?))?(?:\\s*,\\s*|$)',", "snippet": "accept_language_re = re . compile ( r'''         ([A-Za-z]\\{1,8\\}(?:-[A-Za-z0-9]\\{1,8\\})*|\\*)      # 'en', 'en-au', 'x-y-z', 'es-419', '*'         (?:\\s*;\\s*q=(0(?:\\.\\d\\{,3\\})?|1(?:.0\\{,3\\})?))?   # Optional 'q=1.00', 'q=0.8'         (?:\\s*,\\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )"}
{"intent": "and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]\\{1,8\\}(?:-[a-z0-9]\\{1,8\\})*$' and re.IGNORECASE,", "snippet": "language_code_re = re . compile ( r'^[a-z]\\{1,8\\}(?:-[a-z0-9]\\{1,8\\})*$' , re . IGNORECASE )"}
{"intent": "substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\\w-]+)(/|$)', substitute the result for language_code_prefix_re.", "snippet": "language_code_prefix_re = re . compile ( r'^/([\\w-]+)(/|$)' )"}
{"intent": "_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.", "snippet": "_BROWSERS_DEPRECATED_LOCALES = \\{  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  \\}"}
{"intent": "substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.", "snippet": "_DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES"}
{"intent": "decorator function receiver with an argument setting_changed,", "snippet": "@ receiver ( setting_changed )"}
{"intent": "define the function reset_cache with an argument unpacked dictionary kwargs.", "snippet": "def reset_cache ( ** kwargs ) :"}
{"intent": "if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',", "snippet": "if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :"}
{"intent": "use global variable _supported.", "snippet": "global _supported"}
{"intent": "_supported is None.", "snippet": "_supported = None"}
{"intent": "call the method check_for_language.cache_clear.", "snippet": "check_for_language . cache_clear ( )"}
{"intent": "call the method get_supported_language_variant.cache_clear.", "snippet": "get_supported_language_variant . cache_clear ( )"}
{"intent": "define the function to_locale with 2 arguments language and to_lower set to boolean False.", "snippet": "def to_locale ( language , to_lower = False ) :"}
{"intent": "find first index of occurrence of character '-' in language, substitute it for p.", "snippet": "p = language . find ( '-' )"}
{"intent": "if p is greater or equal to integer 0,", "snippet": "if p >= 0 :"}
{"intent": "if to_lower is true,", "snippet": "if to_lower :"}
{"intent": "convert fist p elements of language to lowercase, append '_' to it,", "snippet": "return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )"}
{"intent": "covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,", "snippet": "else :"}
{"intent": "slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,", "snippet": "if len ( language [ p + 1 : ] ) > 2 :"}
{"intent": "convert fist p elements of language to lowercase, append '_' to it,", "snippet": "return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )"}
{"intent": "covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,", "snippet": "return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )"}
{"intent": "covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,", "snippet": "else :"}
{"intent": "convert language to lowercase, return it.", "snippet": "return language . lower ( )"}
{"intent": "define the function to_language with an argument locale.", "snippet": "def to_language ( locale ) :"}
{"intent": "find first index of occurrence of character '-' in locale, substitute it for p.", "snippet": "p = locale . find ( '_' )"}
{"intent": "if p is greater or equal to integer 0,", "snippet": "if p >= 0 :"}
{"intent": "convert fist p elements of locale to lowercase, append '_' to it,", "snippet": "return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )"}
{"intent": "covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,", "snippet": "else :"}
{"intent": "convert locale to lowercase and return it.", "snippet": "return locale . lower ( )"}
{"intent": "derive the class DjangoTranslation from gettext_module.GNUTranslations base class.", "snippet": "class DjangoTranslation ( gettext_module . GNUTranslations ) :"}
{"intent": "define the method __init__ with 2 arguments: self and language.", "snippet": "def __init__ ( self , language ) :"}
{"intent": "call the method gettext_module.GNUTranslations.__init__ with an argument self.", "snippet": "gettext_module . GNUTranslations . __init__ ( self )"}
{"intent": "substitute language for self.__language.", "snippet": "self . __language = language"}
{"intent": "call the function to_language with an argument language, substitute it for self.__to_language.", "snippet": "self . __to_language = to_language ( language )"}
{"intent": "call the function to_locale with an argument language, substitute it for self.__locale.", "snippet": "self . __locale = to_locale ( language )"}
{"intent": "self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,", "snippet": "self . plural = lambda n : int ( n != 1 )"}
{"intent": "converted to an integer.   call the method self._init_translation_catalog.", "snippet": "self . _init_translation_catalog ( )"}
{"intent": "call the method self._add_installed_apps_translations.", "snippet": "self . _add_installed_apps_translations ( )"}
{"intent": "call the method self._add_local_translations.", "snippet": "self . _add_local_translations ( )"}
{"intent": "call the method self._add_fallback.", "snippet": "self . _add_fallback ( )"}
{"intent": "define the method __repr__ with an argument self.", "snippet": "def __repr__ ( self ) :"}
{"intent": "return a string '<DjangoTranslation lang:%s>', where '%s' is replaced with self.__language.", "snippet": "return '<DjangoTranslation lang:%s>' % self . __language"}
{"intent": "define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.", "snippet": "def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :"}
{"intent": "call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,", "snippet": "translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )"}
{"intent": "languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',", "snippet": "if not hasattr ( translation , '_catalog' ) :"}
{"intent": "translation._catalog is an empty dictionary.", "snippet": "translation . _catalog = \\{ \\}"}
{"intent": "translation._info is an empty dictionary.", "snippet": "translation . _info = \\{ \\}"}
{"intent": "return translation.", "snippet": "return translation"}
{"intent": "define the method _init_translation_catalog with an argument self.", "snippet": "def _init_translation_catalog ( self ) :"}
{"intent": "get the value under the settings.__module__ key of the sys.modules dictionary,", "snippet": "settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )"}
{"intent": "use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,", "snippet": "localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )"}
{"intent": "substitute it for localedir.   use_null_fallback is boolean True.", "snippet": "use_null_fallback = True"}
{"intent": "if self.__language equals settings.LANGUAGE_CODE,", "snippet": "if self . __language == settings . LANGUAGE_CODE :"}
{"intent": "use_null_fallback is boolean False.", "snippet": "use_null_fallback = False"}
{"intent": "call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.", "snippet": "translation = self . _new_gnu_trans ( localedir , use_null_fallback )"}
{"intent": "call the method translation._info.copy, substitute the result for self._info.", "snippet": "self . _info = translation . _info . copy ( )"}
{"intent": "call the method translation._catalog.copy, substitute the result for self._catalog.", "snippet": "self . _catalog = translation . _catalog . copy ( )"}
{"intent": "define the method _add_installed_apps_translations with an argument self.", "snippet": "def _add_installed_apps_translations ( self ) :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.", "snippet": "app_configs = reversed ( list ( apps . get_app_configs ( ) ) )"}
{"intent": "if AppRegistryNotReady exception is caught,", "snippet": "except AppRegistryNotReady :"}
{"intent": "rais an AppRegistryNotReady exception with an argument string 'The translation infrastructure cannot be initialized before the '", "snippet": "raise AppRegistryNotReady (  'The translation infrastructure cannot be initialized before the '  'apps registry is ready. Check that you don't make non-lazy '  'gettext calls at import time.' )"}
{"intent": "'apps registry is ready. Check that you don't make non-lazy gettext calls at import time.'.   for every app_config in app_configs,", "snippet": "for app_config in app_configs :"}
{"intent": "join app_config.path and string 'locale' into a file path, substitute it for localedir.", "snippet": "localedir = os . path . join ( app_config . path , 'locale' )"}
{"intent": "call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.", "snippet": "translation = self . _new_gnu_trans ( localedir )"}
{"intent": "call the method self.merge with an argument translation.", "snippet": "self . merge ( translation )"}
{"intent": "define the method _add_local_translations with an argument self.", "snippet": "def _add_local_translations ( self ) :"}
{"intent": "reverse settings.LOCALE_PATHS element order, for every localedir in the result,", "snippet": "for localedir in reversed ( settings . LOCALE_PATHS ) :"}
{"intent": "call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.", "snippet": "translation = self . _new_gnu_trans ( localedir )"}
{"intent": "call the method self.merge with an argument translation.", "snippet": "self . merge ( translation )"}
{"intent": "define the method _add_fallback with an argument self.", "snippet": "def _add_fallback ( self ) :"}
{"intent": "if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string 'en-us',", "snippet": "if self . __language == settings . LANGUAGE_CODE or self . __language == 'en-us' :"}
{"intent": "return.", "snippet": "return"}
{"intent": "call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.", "snippet": "default_translation = translation ( settings . LANGUAGE_CODE )"}
{"intent": "call the method self.add_fallback with an argument default_translation.", "snippet": "self . add_fallback ( default_translation )"}
{"intent": "define the method merge with 2 arguments self and other.", "snippet": "def merge ( self , other ) :"}
{"intent": "update the self._catalog dictionary with other._catalog.", "snippet": "self . _catalog . update ( other . _catalog )"}
{"intent": "define the method language with an argument self.", "snippet": "def language ( self ) :"}
{"intent": "return self.__language.", "snippet": "return self . __language"}
{"intent": "define the method to_language with an argument self.", "snippet": "def to_language ( self ) :"}
{"intent": "return self.__to_language.", "snippet": "return self . __to_language"}
{"intent": "define the function translation with an argument language.", "snippet": "def translation ( language ) :"}
{"intent": "use global variable _translations.", "snippet": "global _translations"}
{"intent": "if language is not contained in _translations,", "snippet": "if language not in _translations :"}
{"intent": "_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.", "snippet": "_translations [ language ] = DjangoTranslation ( language )"}
{"intent": "return _translations dictionary value, under the language key.", "snippet": "return _translations [ language ]"}
{"intent": "define the function activate with an argument language.", "snippet": "def activate ( language ) :"}
{"intent": "if language is contained in _DJANGO_DEPRECATED_LOCALES,", "snippet": "if language in _DJANGO_DEPRECATED_LOCALES :"}
{"intent": "msg is a string 'The use of the language code '%s' is deprecated. Please use the '%s' translation instead.'.", "snippet": "msg = ( 'The use of the language code '%s' is deprecated. '  'Please use the '%s' translation instead.' )"}
{"intent": "call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,", "snippet": "warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )"}
{"intent": "of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.", "snippet": "_active . value = translation ( language )"}
{"intent": "define the function deactivate.", "snippet": "def deactivate ( ) :"}
{"intent": "if _active has an attribute 'value',", "snippet": "if hasattr ( _active , 'value' ) :"}
{"intent": "delete _active.value.", "snippet": "del _active . value"}
{"intent": "define the function deactivate_all.", "snippet": "def deactivate_all ( ) :"}
{"intent": "call the method gettext_module.NullTranslations, substitute the result for _active.value.", "snippet": "_active . value = gettext_module . NullTranslations ( )"}
{"intent": "define the function get_language.", "snippet": "def get_language ( ) :"}
{"intent": "get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.", "snippet": "t = getattr ( _active , 'value' , None )"}
{"intent": "if t is not None,", "snippet": "if t is not None :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the method t.to_language, return the result.", "snippet": "return t . to_language ( )"}
{"intent": "if AttributeError exception is caught,", "snippet": "except AttributeError :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "return settings.LANGUAGE_CODE.", "snippet": "return settings . LANGUAGE_CODE"}
{"intent": "define the function get_language_bidi.", "snippet": "def get_language_bidi ( ) :"}
{"intent": "call the function get_language, split the result by '-', substitute the first element of the result for base_lang.", "snippet": "base_lang = get_language ( ) . split ( '-' ) [ 0 ]"}
{"intent": "if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.", "snippet": "return base_lang in settings . LANGUAGES_BIDI"}
{"intent": "define the function catalog.", "snippet": "def catalog ( ) :"}
{"intent": "use global variable _default.", "snippet": "global _default"}
{"intent": "get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.", "snippet": "t = getattr ( _active , 'value' , None )"}
{"intent": "if t is not None", "snippet": "if t is not None :"}
{"intent": "return t.", "snippet": "return t"}
{"intent": "if _default is None", "snippet": "if _default is None :"}
{"intent": "call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.", "snippet": "_default = translation ( settings . LANGUAGE_CODE )"}
{"intent": "return _default.", "snippet": "return _default"}
{"intent": "define the function do_translate with 2 arguments: message and translation_function.", "snippet": "def do_translate ( message , translation_function ) :"}
{"intent": "use global variable _default.", "snippet": "global _default"}
{"intent": "replace every occurrence of string '\\r\\n' in message with '\\n', replace every occurrence of string '\\r',", "snippet": "eol_message = message . replace ( str ( '\\r\\n' ) , str ( '\\n' ) ) . replace ( str ( '\\r' ) , str ( '\\n' ) )"}
{"intent": "in the previous result for with string '\\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.", "snippet": "t = getattr ( _active , 'value' , None )"}
{"intent": "if t is not None,", "snippet": "if t is not None :"}
{"intent": "get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.", "snippet": "result = getattr ( t , translation_function ) ( eol_message )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "if _default is None,", "snippet": "if _default is None :"}
{"intent": "call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.", "snippet": "_default = translation ( settings . LANGUAGE_CODE )"}
{"intent": "get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.", "snippet": "result = getattr ( _default , translation_function ) ( eol_message )"}
{"intent": "if message is an instance of SafeData,", "snippet": "if isinstance ( message , SafeData ) :"}
{"intent": "call the function mark_safe with an argument result, return it.", "snippet": "return mark_safe ( result )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "define the function gettext with an argument message.", "snippet": "def gettext ( message ) :"}
{"intent": "call the function do_translate with 2 arguments: message and string 'gettext', return the result.", "snippet": "return do_translate ( message , 'gettext' )"}
{"intent": "if six.PY3 is true,", "snippet": "if six . PY3 :"}
{"intent": "substitute gettext for ugettext.", "snippet": "ugettext = gettext"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "define the function ugettext with an argument message.", "snippet": "def ugettext ( message ) :"}
{"intent": "call the function do_translate with 2 arguments: message and string 'ugettext', return the result.", "snippet": "return do_translate ( message , 'ugettext' )"}
{"intent": "define the function pgettext with 2 arguments: context and message.", "snippet": "def pgettext ( context , message ) :"}
{"intent": "convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.", "snippet": "msg_with_ctxt = '%s%s%s' % ( context , CONTEXT_SEPARATOR , message )"}
{"intent": "call the function ugettext with an argument msg_with_ctxt, substitute the result for result.", "snippet": "result = ugettext ( msg_with_ctxt )"}
{"intent": "if CONTEXT_SEPARATOR is contained in result,", "snippet": "if CONTEXT_SEPARATOR in result :"}
{"intent": "call the function force_text with an argument message, return the result.", "snippet": "result = force_text ( message )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "define the function locale with an argument locale.", "snippet": "def gettext_noop ( message ) :"}
{"intent": "return message.", "snippet": "return message"}
{"intent": "define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.", "snippet": "def do_ntranslate ( singular , plural , number , translation_function ) :"}
{"intent": "use global variable _default.", "snippet": "global _default"}
{"intent": "get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.", "snippet": "t = getattr ( _active , 'value' , None )"}
{"intent": "if t is not None,", "snippet": "if t is not None :"}
{"intent": "get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.", "snippet": "return getattr ( t , translation_function ) ( singular , plural , number )"}
{"intent": "if _default is None,", "snippet": "if _default is None :"}
{"intent": "call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.", "snippet": "_default = translation ( settings . LANGUAGE_CODE )"}
{"intent": "get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.", "snippet": "return getattr ( _default , translation_function ) ( singular , plural , number )"}
{"intent": "define the function ngettext with 3 arguments: singular, plural and number.", "snippet": "def ngettext ( singular , plural , number ) :"}
{"intent": "call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.", "snippet": "return do_ntranslate ( singular , plural , number , 'ngettext' )"}
{"intent": "if six.PY3 is true,", "snippet": "if six . PY3 :"}
{"intent": "substitute ngettext for ungettext.", "snippet": "ungettext = ngettext"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "define the function ungettext with 3 arguments: singular, plural and number.", "snippet": "def ungettext ( singular , plural , number ) :"}
{"intent": "call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.", "snippet": "return do_ntranslate ( singular , plural , number , 'ungettext' )"}
{"intent": "define the function npgettext with 4 arguments: context, singular, plural and number.", "snippet": "def npgettext ( context , singular , plural , number ) :"}
{"intent": "msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,", "snippet": "msgs_with_ctxt = ( '%s%s%s' % ( context , CONTEXT_SEPARATOR , singular ) ,  '%s%s%s' % ( context , CONTEXT_SEPARATOR , plural ) ,  number )"}
{"intent": "string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.", "snippet": "result = ungettext ( * msgs_with_ctxt )"}
{"intent": "if CONTEXT_SEPARATOR is contained in result,", "snippet": "if CONTEXT_SEPARATOR in result :"}
{"intent": "call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.", "snippet": "result = ungettext ( singular , plural , number )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "define the function all_locale_paths.", "snippet": "def all_locale_paths ( ) :"}
{"intent": "get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,", "snippet": "globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )"}
{"intent": "for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.", "snippet": "return [ globalpath ] + list ( settings . LOCALE_PATHS )"}
{"intent": "decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.", "snippet": "@ lru_cache . lru_cache ( maxsize = 1000 )"}
{"intent": "define the function check_for_language with an argument lang_code.", "snippet": "def check_for_language ( lang_code ) :"}
{"intent": "call the method language_code_re.search with an argument lang_code, if it evaluates to false,", "snippet": "if not language_code_re . search ( lang_code ) :"}
{"intent": "return boolean False.", "snippet": "return False"}
{"intent": "call the function all_locale_paths, for every path is the result,", "snippet": "for path in all_locale_paths ( ) :"}
{"intent": "call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,", "snippet": "if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :"}
{"intent": "to_locale called with an argument lang_code, if the result is not None,   return boolean True.", "snippet": "return True"}
{"intent": "return boolean False.", "snippet": "return False"}
{"intent": "decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.", "snippet": "@ lru_cache . lru_cache ( maxsize = 1000 )"}
{"intent": "define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.", "snippet": "def get_supported_language_variant ( lang_code , strict = False ) :"}
{"intent": "use global variable _supported.", "snippet": "global _supported"}
{"intent": "if _supported is None,", "snippet": "if _supported is None :"}
{"intent": "_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.", "snippet": "_supported = OrderedDict ( settings . LANGUAGES )"}
{"intent": "if lang_code is true,", "snippet": "if lang_code :"}
{"intent": "get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.", "snippet": "replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )"}
{"intent": "if lang_code is not contained in _supported and replacement is contained in _supported,", "snippet": "if lang_code not in _supported and replacement in _supported :"}
{"intent": "return replacement.", "snippet": "return replacement"}
{"intent": "split lang_code by '-', substitute the first element of the result for generic_lang_code.", "snippet": "generic_lang_code = lang_code . split ( '-' ) [ 0 ]"}
{"intent": "for every code in tuple with 2 elements: lang_code and generic_lang_code,", "snippet": "for code in ( lang_code , generic_lang_code ) :"}
{"intent": "if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,", "snippet": "if code in _supported and check_for_language ( code ) :"}
{"intent": "return code.", "snippet": "return code"}
{"intent": "if strict is false,", "snippet": "if not strict :"}
{"intent": "for every supported_code in _supported,", "snippet": "for supported_code in _supported :"}
{"intent": "append '-' to generic_lang_code, if supported_code starts with it,", "snippet": "if supported_code . startswith ( generic_lang_code + '-' ) :"}
{"intent": "return supported_code.", "snippet": "return supported_code"}
{"intent": "raise an LookupError with an argument lang_code.", "snippet": "raise LookupError ( lang_code )"}
{"intent": "define the function get_language_from_path with 2 arguments: path and strict set to boolean False.", "snippet": "def get_language_from_path ( path , strict = False ) :"}
{"intent": "call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.", "snippet": "regex_match = language_code_prefix_re . match ( path )"}
{"intent": "if regex_match is false,", "snippet": "if not regex_match :"}
{"intent": "return None.", "snippet": "return None"}
{"intent": "call the method regex_match.group with an argument integer 1, substitute the result for lang_code.", "snippet": "lang_code = regex_match . group ( 1 )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.", "snippet": "return get_supported_language_variant ( lang_code , strict = strict )"}
{"intent": "if LookupError exception is caught,", "snippet": "except LookupError :"}
{"intent": "return None.", "snippet": "return None"}
{"intent": "define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.", "snippet": "def get_language_from_request ( request , check_path = False ) :"}
{"intent": "use global variable _supported.", "snippet": "global _supported"}
{"intent": "if _supported is None,", "snippet": "if _supported is None :"}
{"intent": "_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.", "snippet": "_supported = OrderedDict ( settings . LANGUAGES )"}
{"intent": "if check_path is true,", "snippet": "if check_path :"}
{"intent": "call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.", "snippet": "lang_code = get_language_from_path ( request . path_info )"}
{"intent": "if lang_code is not None,", "snippet": "if lang_code is not None :"}
{"intent": "return lang_code.", "snippet": "return lang_code"}
{"intent": "if request has an attribute 'session',", "snippet": "if hasattr ( request , 'session' ) :"}
{"intent": "get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.", "snippet": "lang_code = request . session . get ( LANGUAGE_SESSION_KEY )"}
{"intent": "if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,", "snippet": "if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :"}
{"intent": "called with an argument lang_code is true,   return lang_code.", "snippet": "return lang_code"}
{"intent": "get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.", "snippet": "lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function get_supported_language_variant with an argument lang_code, return the result.", "snippet": "return get_supported_language_variant ( lang_code )"}
{"intent": "if LookupError exception is caught,", "snippet": "except LookupError :"}
{"intent": "do nothing.", "snippet": "pass"}
{"intent": "get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,", "snippet": "accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )"}
{"intent": "if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,", "snippet": "for accept_lang , unused in parse_accept_lang_header ( accept ) :"}
{"intent": "if accept_lang equals '*',", "snippet": "if accept_lang == '*' :"}
{"intent": "break from the loop execution.", "snippet": "break"}
{"intent": "call the method language_code_re.search with an argument accept_lang, if it evaluates to false,", "snippet": "if not language_code_re . search ( accept_lang ) :"}
{"intent": "skip this loop iteration.", "snippet": "continue"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function get_supported_language_variant with an argument accept_lang, return the result.", "snippet": "return get_supported_language_variant ( accept_lang )"}
{"intent": "if LookupError exception is caught,", "snippet": "except LookupError :"}
{"intent": "skip this loop iteration.", "snippet": "continue"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.", "snippet": "return get_supported_language_variant ( settings . LANGUAGE_CODE )"}
{"intent": "if LookupError exception is caught,", "snippet": "except LookupError :"}
{"intent": "return settings.LANGUAGE_CODE.", "snippet": "return settings . LANGUAGE_CODE"}
{"intent": "call the function re.compile with an argument raw string '\\S', substitute it for dot_re.", "snippet": "dot_re = re . compile ( r'\\S' )"}
{"intent": "define the function blankout with 2 arguments: src and char.", "snippet": "def blankout ( src , char ) :"}
{"intent": "call the method dot_re.sub with 2 arguments: char and src, return the result.", "snippet": "return dot_re . sub ( char , src )"}
{"intent": "call the function re.compile with an argument raw string '^\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?'))\\s*', substitute the result for context_re.", "snippet": "context_re = re . compile ( r'''^\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?'))\\s*''' )"}
{"intent": "call the function re.compile with an argument string '^\\s*trans\\s+((?:'[^']*?')|(?:'[^']*?'))(\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?')))?\\s*', substitute the result for inline_re.", "snippet": "inline_re = re . compile ( r'''^\\s*trans\\s+((?:'[^']*?')|(?:'[^']*?'))(\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?')))?\\s*''' )"}
{"intent": "call the function re.compile with an argument raw string '^\\s*blocktrans(\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?')))?(?:\\s+|$)',", "snippet": "block_re = re . compile ( r'''^\\s*blocktrans(\\s+.*context\\s+((?:'[^']*?')|(?:'[^']*?')))?(?:\\s+|$)''' )"}
{"intent": "substitute the result for block_re.   call the function re.compile with an argument raw string '^\\s*endblocktrans$', substitute the result for endblock_re.", "snippet": "endblock_re = re . compile ( r'''^\\s*endblocktrans$''' )"}
{"intent": "call the function re.compile with an argument raw string '^\\s*plural$', substitute the result for plural_re.", "snippet": "plural_re = re . compile ( r'''^\\s*plural$''' )"}
{"intent": "call the function re.compile with an argument raw string '_\\(((?:'.*?')|(?:'.*?'))\\)', substitute the result for constant_re.", "snippet": "constant_re = re . compile ( r'''_\\(((?:'.*?')|(?:'.*?'))\\)''' )"}
{"intent": "call the function re.compile with an argument raw string '(?<!%)%(?!%)', substitute the result for one_percent_re.", "snippet": "one_percent_re = re . compile ( r'''(?<!%)%(?!%)''' )"}
{"intent": "define the function templatize with 2 arguments: src and origin set to None.", "snippet": "def templatize ( src , origin = None ) :"}
{"intent": "from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.", "snippet": "from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )"}
{"intent": "call the function force_text with 2 arguments: src and settings.FILE_CHARSET.", "snippet": "src = force_text ( src , settings . FILE_CHARSET )"}
{"intent": "out is an instance of StringIO class, created with an empty string as an argument.", "snippet": "out = StringIO ( '' )"}
{"intent": "message_context is None.", "snippet": "message_context = None"}
{"intent": "intrans is boolean False.", "snippet": "intrans = False"}
{"intent": "inplural is boolean False.", "snippet": "inplural = False"}
{"intent": "trimmed is boolean False.", "snippet": "trimmed = False"}
{"intent": "singular is an empty list.", "snippet": "singular = [ ]"}
{"intent": "plural is an empty list.", "snippet": "plural = [ ]"}
{"intent": "incomment is boolean False.", "snippet": "incomment = False"}
{"intent": "comment is an empty list.", "snippet": "comment = [ ]"}
{"intent": "lineno_comment_map is an dictionary.", "snippet": "lineno_comment_map = \\{ \\}"}
{"intent": "comment_lineno_cache is None.", "snippet": "comment_lineno_cache = None"}
{"intent": "define the function join_tokens with 2 arguments: tokens and trim set to boolean False.", "snippet": "def join_tokens ( tokens , trim = False ) :"}
{"intent": "join tokens elements into a string, substitute it for message.", "snippet": "message = '' . join ( tokens )"}
{"intent": "if trim is true,", "snippet": "if trim :"}
{"intent": "call the function trim_whitespace with an argument message, substitute the result for message.", "snippet": "message = trim_whitespace ( message )"}
{"intent": "return message.", "snippet": "return message"}
{"intent": "instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,", "snippet": "for t in Lexer ( src , origin ) . tokenize ( ) :"}
{"intent": "if incomment is true,", "snippet": "if incomment :"}
{"intent": "if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',", "snippet": "if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :"}
{"intent": "join comment elements into a string, substitute it for content.", "snippet": "content = '' . join ( comment )"}
{"intent": "translators_comment_start is None.", "snippet": "translators_comment_start = None"}
{"intent": "for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,", "snippet": "for lineno , line in enumerate ( content . splitlines ( True ) ) :"}
{"intent": "call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,", "snippet": "if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :"}
{"intent": "substitute lineno for translators_comment_start.", "snippet": "translators_comment_start = lineno"}
{"intent": "for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,", "snippet": "for lineno , line in enumerate ( content . splitlines ( True ) ) :"}
{"intent": "if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,", "snippet": "if translators_comment_start is not None and lineno >= translators_comment_start :"}
{"intent": "substitute '%s' in string ' # %s' with line, write it to out file.", "snippet": "out . write ( ' # %s' % line )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "write string ' #\\n' to out file.", "snippet": "out . write ( ' #\\n' )"}
{"intent": "incomment is boolean False.", "snippet": "incomment = False"}
{"intent": "comment is an empty list.", "snippet": "comment = [ ]"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "append t.contents to comment.", "snippet": "comment . append ( t . contents )"}
{"intent": "otherwise if intrans is true,", "snippet": "elif intrans :"}
{"intent": "if t.token_type equals TOKEN_BLOCK,", "snippet": "if t . token_type == TOKEN_BLOCK :"}
{"intent": "call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.", "snippet": "endbmatch = endblock_re . match ( t . contents )"}
{"intent": "call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.", "snippet": "pluralmatch = plural_re . match ( t . contents )"}
{"intent": "if endbmatch is true,", "snippet": "if endbmatch :"}
{"intent": "if inplural is true,", "snippet": "if inplural :"}
{"intent": "if message_context is true,", "snippet": "if message_context :"}
{"intent": "substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,", "snippet": "out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )"}
{"intent": "called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,", "snippet": "else :"}
{"intent": "substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,", "snippet": "out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )"}
{"intent": "and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,", "snippet": "for part in singular :"}
{"intent": "call the method blankout with 2 arguments: part and 'S', write the result to out.", "snippet": "out . write ( blankout ( part , 'S' ) )"}
{"intent": "for every part in plural,", "snippet": "for part in plural :"}
{"intent": "call the method blankout with 2 arguments: part and 'P', write the result to out.", "snippet": "out . write ( blankout ( part , 'P' ) )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "if message_context is true,", "snippet": "if message_context :"}
{"intent": "substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,", "snippet": "out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )"}
{"intent": "called with 2 arguments: singular and trimmed, write the result to out.   if not,", "snippet": "else :"}
{"intent": "substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,", "snippet": "out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )"}
{"intent": "and trimmed, write the result to out.   for every part in singular,", "snippet": "for part in singular :"}
{"intent": "call the method blankout with 2 arguments: part and 'S', write the result to out.", "snippet": "out . write ( blankout ( part , 'S' ) )"}
{"intent": "message_context is None.", "snippet": "message_context = None"}
{"intent": "intrans is boolean False.", "snippet": "intrans = False"}
{"intent": "inplural is boolean False.", "snippet": "inplural = False"}
{"intent": "singular is an empty list.", "snippet": "singular = [ ]"}
{"intent": "plural is an empty list.", "snippet": "plural = [ ]"}
{"intent": "otherwise if pluralmatch is true,", "snippet": "elif pluralmatch :"}
{"intent": "inplural is boolean True.", "snippet": "inplural = True"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "filemsg is an empty string.", "snippet": "filemsg = ''"}
{"intent": "if origin is true,", "snippet": "if origin :"}
{"intent": "filemsg is a string 'file %s, ', where '%s' is replaced with origin.", "snippet": "filemsg = 'file %s, ' % origin"}
{"intent": "raise an SyntaxError with an argument string 'Translation blocks must not include other block tags: %s (%sline %d)',", "snippet": "raise SyntaxError ( 'Translation blocks must not include other block tags: %s (%sline %d)' % ( t . contents , filemsg , t . lineno ) )"}
{"intent": "formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,", "snippet": "elif t . token_type == TOKEN_VAR :"}
{"intent": "if inplural is true,", "snippet": "if inplural :"}
{"intent": "append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.", "snippet": "plural . append ( '%%(%s)s' % t . contents )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.", "snippet": "singular . append ( '%%(%s)s' % t . contents )"}
{"intent": "if t.token_type == TOKEN_TEXT:", "snippet": "elif t . token_type == TOKEN_TEXT :"}
{"intent": "call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.", "snippet": "contents = one_percent_re . sub ( '%%' , t . contents )"}
{"intent": "if inplural is true,", "snippet": "if inplural :"}
{"intent": "append contents to plural.", "snippet": "plural . append ( contents )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "append contents to singular.", "snippet": "singular . append ( contents )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "if comment_lineno_cache is not None,", "snippet": "if comment_lineno_cache is not None :"}
{"intent": "count occurrences of '\\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.", "snippet": "cur_lineno = t . lineno + t . contents . count ( '\\n' )"}
{"intent": "if comment_lineno_cache equals cur_lineno.", "snippet": "if comment_lineno_cache == cur_lineno :"}
{"intent": "if t.token_type is not equal to TOKEN_COMMENT,", "snippet": "if t . token_type != TOKEN_COMMENT :"}
{"intent": "for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,", "snippet": "for c in lineno_comment_map [ comment_lineno_cache ] :"}
{"intent": "filemsg is an empty string.", "snippet": "filemsg = ''"}
{"intent": "if origin is true,", "snippet": "if origin :"}
{"intent": "filemsg is a string 'file %s, ', where '%s' is replaced with origin.", "snippet": "filemsg = 'file %s, ' % origin"}
{"intent": "warn_msg is a string 'The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.',", "snippet": "warn_msg = ( 'The translator-targeted comment '%s' '  '(%sline %d) was ignored, because it wasn't the last item '  'on the line.' ) % ( c , filemsg , comment_lineno_cache )"}
{"intent": "formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.", "snippet": "warnings . warn ( warn_msg , TranslatorCommentWarning )"}
{"intent": "value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.", "snippet": "lineno_comment_map [ comment_lineno_cache ] = [ ]"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',", "snippet": "out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )"}
{"intent": "format with it a string '# %s', write it to out.   comment_lineno_cache is None,", "snippet": "comment_lineno_cache = None"}
{"intent": "if t.token_type equals TOKEN_BLOCK,", "snippet": "if t . token_type == TOKEN_BLOCK :"}
{"intent": "call the function inline_re.match with an argument t.contents, substitute the result for imatch.", "snippet": "imatch = inline_re . match ( t . contents )"}
{"intent": "call the function block_re.match with an argument t.contents, substitute the result for bmatch.", "snippet": "bmatch = block_re . match ( t . contents )"}
{"intent": "call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.", "snippet": "cmatches = constant_re . findall ( t . contents )"}
{"intent": "if imatch is true,", "snippet": "if imatch :"}
{"intent": "call the method imatch.group with an argument integer 1, substitute the result for g.", "snippet": "g = imatch . group ( 1 )"}
{"intent": "if first element of g equals a string ''',", "snippet": "if g [ 0 ] == ''' :"}
{"intent": "strip g of ''' from both ends,", "snippet": "g = g . strip ( ''' )"}
{"intent": "otherwise if first element of g equals a string ''',", "snippet": "elif g [ 0 ] == ''' :"}
{"intent": "strip g of ''' from both ends,", "snippet": "g = g . strip ( ''' )"}
{"intent": "call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .", "snippet": "g = one_percent_re . sub ( '%%' , g )"}
{"intent": "call the method imatch.group with an argument integer 1, if it evaluates to true,", "snippet": "if imatch . group ( 2 ) :"}
{"intent": "call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,", "snippet": "context_match = context_re . match ( imatch . group ( 2 ) )"}
{"intent": "substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.", "snippet": "message_context = context_match . group ( 1 )"}
{"intent": "if first element of message_context equals to character ''',", "snippet": "if message_context [ 0 ] == ''' :"}
{"intent": "strip message_context of ''' characters from both ends, substitute the result for message_context.", "snippet": "message_context = message_context . strip ( ''' )"}
{"intent": "otherwise if, first element of message_context is equal to ''',", "snippet": "elif message_context [ 0 ] == ''' :"}
{"intent": "strip message_context of ''' characters from both ends, substitute the result for message_context.", "snippet": "message_context = message_context . strip ( ''' )"}
{"intent": "format string ' pgettext(%r, %r) ' with message_context and g, write it to out.", "snippet": "out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )"}
{"intent": "message_context is None.", "snippet": "message_context = None"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "format string ' gettext(%r) ' with g, write it to out.", "snippet": "out . write ( ' gettext(%r) ' % g )"}
{"intent": "otherwise if bmatch is true,", "snippet": "elif bmatch :"}
{"intent": "call the method constant_re.findall with an argument t.contents, for every fmatch in the result,", "snippet": "for fmatch in constant_re . findall ( t . contents ) :"}
{"intent": "format string ' _(%s) ', with fmatch, write it to out.", "snippet": "out . write ( ' _(%s) ' % fmatch )"}
{"intent": "call the method bmatch.group with an argument integer 1, if it evaluates to true,", "snippet": "if bmatch . group ( 1 ) :"}
{"intent": "call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,", "snippet": "context_match = context_re . match ( bmatch . group ( 1 ) )"}
{"intent": "substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.", "snippet": "message_context = context_match . group ( 1 )"}
{"intent": "if first element of message_context equals to character ''',", "snippet": "if message_context [ 0 ] == ''' :"}
{"intent": "strip message_context of ''' characters from both ends, substitute the result for message_context.", "snippet": "message_context = message_context . strip ( ''' )"}
{"intent": "otherwise if first element of message_context equals to character ''',", "snippet": "elif message_context [ 0 ] == ''' :"}
{"intent": "strip message_context of ''' characters from both ends, substitute the result for message_context.", "snippet": "message_context = message_context . strip ( ''' )"}
{"intent": "intrans is boolean True.", "snippet": "intrans = True"}
{"intent": "inplural is boolean False.", "snippet": "inplural = False"}
{"intent": "if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.", "snippet": "trimmed = 'trimmed' in t . split_contents ( )"}
{"intent": "singular is an empty list.", "snippet": "singular = [ ]"}
{"intent": "plural is an empty list.", "snippet": "plural = [ ]"}
{"intent": "otherwise if cmatches is true,", "snippet": "elif cmatches :"}
{"intent": "for every cmatch in cmatches,", "snippet": "for cmatch in cmatches :"}
{"intent": "format string ' _(%s) ', with fmatch, write it to out.", "snippet": "out . write ( ' _(%s) ' % cmatch )"}
{"intent": "otherwise if t.contents equals a string 'comment',", "snippet": "elif t . contents == 'comment' :"}
{"intent": "incomment is boolean True.", "snippet": "incomment = True"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function blankout with 2 arguments: t.contents and 'B', write the result to out.", "snippet": "out . write ( blankout ( t . contents , 'B' ) )"}
{"intent": "otherwise if t.token_type equals TOKEN_VAR,", "snippet": "elif t . token_type == TOKEN_VAR :"}
{"intent": "split t.contents by '|' symbol, substitute the result for parts,", "snippet": "parts = t . contents . split ( '|' )"}
{"intent": "call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.", "snippet": "cmatch = constant_re . match ( parts [ 0 ] )"}
{"intent": "if cmatch is true,", "snippet": "if cmatch :"}
{"intent": "call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.", "snippet": "out . write ( ' _(%s) ' % cmatch . group ( 1 ) )"}
{"intent": "for every p in parts without the first element,", "snippet": "for p in parts [ 1 : ] :"}
{"intent": "find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,", "snippet": "if p . find ( ':_(' ) >= 0 :"}
{"intent": "split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.", "snippet": "out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function blankout with 2 arguments: p and 'F', write the result to out.", "snippet": "out . write ( blankout ( p , 'F' ) )"}
{"intent": "otherwise if t.token_type equals TOKEN_COMMENT,", "snippet": "elif t . token_type == TOKEN_COMMENT :"}
{"intent": "strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,", "snippet": "if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :"}
{"intent": "call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.", "snippet": "lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )"}
{"intent": "substitute t.lineno for comment_lineno_cache.", "snippet": "comment_lineno_cache = t . lineno"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function blankout with 2 arguments: t.contents and 'X', write the result to out.", "snippet": "out . write ( blankout ( t . contents , 'X' ) )"}
{"intent": "call the method out.getvalue, return the result.", "snippet": "return out . getvalue ( )"}
{"intent": "define the function parse_accept_lang_header with an argument lang_string.", "snippet": "def parse_accept_lang_header ( lang_string ) :"}
{"intent": "result is an empty list.", "snippet": "result = [ ]"}
{"intent": "convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.", "snippet": "pieces = accept_language_re . split ( lang_string . lower ( ) )"}
{"intent": "if last element of pieces is true,", "snippet": "if pieces [ - 1 ] :"}
{"intent": "return an empty list.", "snippet": "return [ ]"}
{"intent": "for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,", "snippet": "for i in range ( 0 , len ( pieces ) - 1 , 3 ) :"}
{"intent": "substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.", "snippet": "first , lang , priority = pieces [ i : i + 3 ]"}
{"intent": "if first is true,", "snippet": "if first :"}
{"intent": "return an empty list.", "snippet": "return [ ]"}
{"intent": "if priority is true,", "snippet": "if priority :"}
{"intent": "try,", "snippet": "try :"}
{"intent": "convert priority into a floating point integer, substitute it for priority.", "snippet": "priority = float ( priority )"}
{"intent": "if ValueError exception is caught,", "snippet": "except ValueError :"}
{"intent": "return an empty list.", "snippet": "return [ ]"}
{"intent": "if priority is false,", "snippet": "if not priority :"}
{"intent": "priority is floating point number 1.0.", "snippet": "priority = 1.0"}
{"intent": "append a tuple with 2 entries lang and priority to result.", "snippet": "result . append ( ( lang , priority ) )"}
{"intent": "sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.", "snippet": "result . sort ( key = lambda k : k [ 1 ] , reverse = True )"}
{"intent": "return result.", "snippet": "return result"}
{"intent": "import module copy.", "snippet": "import copy"}
{"intent": "derive the class Node from object base class.", "snippet": "class Node ( object ) :"}
{"intent": "default is a string 'DEFAULT'.", "snippet": "default = 'DEFAULT'"}
{"intent": "define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.", "snippet": "def __init__ ( self , children = None , connector = None , negated = False ) :"}
{"intent": "if children is true, copy children list to self.children, otherwise self.children is an empty list.", "snippet": "self . children = children [ : ] if children else [ ]"}
{"intent": "if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.", "snippet": "self . connector = connector or self . default"}
{"intent": "substitute negated for self.negated.", "snippet": "self . negated = negated"}
{"intent": "decorator classmethod,", "snippet": "@ classmethod"}
{"intent": "define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.", "snippet": "def _new_instance ( cls , children = None , connector = None , negated = False ) :"}
{"intent": "obj is an instance of Node class, created with 3 arguments: children, connector and negated.", "snippet": "obj = Node ( children , connector , negated )"}
{"intent": "substitute cls for obj.__class__.", "snippet": "obj . __class__ = cls"}
{"intent": "return obj.", "snippet": "return obj"}
{"intent": "define the method __str__ with an argument self.", "snippet": "def __str__ ( self ) :"}
{"intent": "if self.negated,", "snippet": "if self . negated :"}
{"intent": "return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',", "snippet": "return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )"}
{"intent": "for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',", "snippet": "return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )"}
{"intent": "for every c in self.children.   define the method __repr__ with an argument self.", "snippet": "def __repr__ ( self ) :"}
{"intent": "return string '<%s: %s>', formated with self.__class__.__name__ and self.", "snippet": "return '<%s: %s>' % ( self . __class__ . __name__ , self )"}
{"intent": "define the method __deepcopy__ with 2 arguments: self and memodict.", "snippet": "def __deepcopy__ ( self , memodict ) :"}
{"intent": "obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.", "snippet": "obj = Node ( connector = self . connector , negated = self . negated )"}
{"intent": "substitute self.__class__ for obj.__class__.", "snippet": "obj . __class__ = self . __class__"}
{"intent": "call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.", "snippet": "obj . children = copy . deepcopy ( self . children , memodict )"}
{"intent": "return obj.", "snippet": "return obj"}
{"intent": "define the method __len__ with an argument self.", "snippet": "def __len__ ( self ) :"}
{"intent": "return the length of self.children.", "snippet": "return len ( self . children )"}
{"intent": "define the method __bool__ with an argument self.", "snippet": "def __bool__ ( self ) :"}
{"intent": "convert self.children into an boolean, return it.", "snippet": "return bool ( self . children )"}
{"intent": "define the method __nonzero__ with an argument self.", "snippet": "def __nonzero__ ( self ) :"}
{"intent": "get the type of the self object, on the result call the __bool__ method with an argument self, return the result.", "snippet": "return type ( self ) . __bool__ ( self )"}
{"intent": "define the method __contains__ with 2 arguments: self and other.", "snippet": "def __contains__ ( self , other ) :"}
{"intent": "if other is contained in self.children, return boolean True, otherwise return boolean False.", "snippet": "return other in self . children"}
{"intent": "define the method _prepare_data with 2 arguments: self and data.", "snippet": "def _prepare_data ( self , data ) :"}
{"intent": "return data.", "snippet": "return data"}
{"intent": "define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.", "snippet": "def add ( self , data , conn_type , squash = True ) :"}
{"intent": "if data is contained in self.children,", "snippet": "if data in self . children :"}
{"intent": "return data.", "snippet": "return data"}
{"intent": "call the method self._prepare_data with an argument data, substitute the result for data.", "snippet": "data = self . _prepare_data ( data )"}
{"intent": "if squash is false,", "snippet": "if not squash :"}
{"intent": "append data to self.children.", "snippet": "self . children . append ( data )"}
{"intent": "return data.", "snippet": "return data"}
{"intent": "if self.connector equals conn_type,", "snippet": "if self . connector == conn_type :"}
{"intent": "if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,", "snippet": "if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :"}
{"intent": "extend self.children list with data.children.", "snippet": "self . children . extend ( data . children )"}
{"intent": "return self.", "snippet": "return self"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "append data to self.children.", "snippet": "self . children . append ( data )"}
{"intent": "return data.", "snippet": "return data"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.", "snippet": "obj = self . _new_instance ( self . children , self . connector ,  self . negated )"}
{"intent": "substitute conn_type for self.connector.", "snippet": "self . connector = conn_type"}
{"intent": "self.children is an list with 2 elements: obj and data.", "snippet": "self . children = [ obj , data ]"}
{"intent": "return data.", "snippet": "return data"}
{"intent": "define the method negate with an argument self.", "snippet": "def negate ( self ) :"}
{"intent": "invert self.negated.", "snippet": "self . negated = not self . negated"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "from datetime import timedelta and tzinfo into default name space.", "snippet": "from datetime import timedelta , tzinfo"}
{"intent": "import module time.", "snippet": "import time"}
{"intent": "import module warnings.", "snippet": "import warnings"}
{"intent": "from django.utils.deprecation import RemovedInDjango19Warning into default name space.", "snippet": "from django . utils . deprecation import RemovedInDjango19Warning"}
{"intent": "from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.", "snippet": "from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING"}
{"intent": "call the function warnings.warn with 3 arguments: string 'django.utils.tzinfo will be removed in Django 1.9. '", "snippet": "warnings . warn (  'django.utils.tzinfo will be removed in Django 1.9. '  'Use django.utils.timezone instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )"}
{"intent": "'Use django.utils.timezone instead.', RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.", "snippet": "class FixedOffset ( tzinfo ) :"}
{"intent": "define the method __init__ with 2 arguments: self and offset.", "snippet": "def __init__ ( self , offset ) :"}
{"intent": "call the function warnings.warn with 2 arguments: 'django.utils.tzinfo.FixedOffset will be removed in Django 1.9. '", "snippet": "warnings . warn (  'django.utils.tzinfo.FixedOffset will be removed in Django 1.9. '  'Use django.utils.timezone.get_fixed_timezone instead.' ,  RemovedInDjango19Warning )"}
{"intent": "'Use django.utils.timezone.get_fixed_timezone instead.' and RemovedInDjango19Warning.   if offset is an instance of timedelta class,", "snippet": "if isinstance ( offset , timedelta ) :"}
{"intent": "substitute offset for self.__offset.", "snippet": "self . __offset = offset"}
{"intent": "substitute self.__offset.seconds for offset.", "snippet": "offset = self . __offset . seconds // 60"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.", "snippet": "self . __offset = timedelta ( minutes = offset )"}
{"intent": "if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',", "snippet": "sign = '-' if offset < 0 else '+'"}
{"intent": "self.__name is a string '%s%02d%02d', replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,", "snippet": "self . __name = '%s%02d%02d' % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )"}
{"intent": "and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.", "snippet": "def __repr__ ( self ) :"}
{"intent": "return self.__name.", "snippet": "return self . __name"}
{"intent": "define the method __getinitargs__ with an argument self.", "snippet": "def __getinitargs__ ( self ) :"}
{"intent": "return a tuple with an element self.__offset.", "snippet": "return self . __offset ,"}
{"intent": "define the method utcoffset with 2 arguments self and dt.", "snippet": "def utcoffset ( self , dt ) :"}
{"intent": "return self.__offset.", "snippet": "return self . __offset"}
{"intent": "define the method tzname with 2 arguments self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "return self.__name.", "snippet": "return self . __name"}
{"intent": "define the method dst with 2 arguments self and dt.", "snippet": "def dst ( self , dt ) :"}
{"intent": "call the function timedelta with an argument integer 0, return the result.", "snippet": "return timedelta ( 0 )"}
{"intent": "derive the class LocalTimezone from the tzinfo base class.", "snippet": "class LocalTimezone ( tzinfo ) :"}
{"intent": "define the method __init__ with 2 arguments self and dt.", "snippet": "def __init__ ( self , dt ) :"}
{"intent": "call the function warnings.warn with 2 arguments: string 'django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. '", "snippet": "warnings . warn (  'django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. '  'Use django.utils.timezone.get_default_timezone instead.' ,  RemovedInDjango19Warning )"}
{"intent": "'Use django.utils.timezone.get_default_timezone instead.' and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.", "snippet": "tzinfo . __init__ ( self )"}
{"intent": "substitute dt for self.__dt.", "snippet": "self . __dt = dt"}
{"intent": "call the method self.tzname with an argument dt, substitute the result for self._tzname.", "snippet": "self . _tzname = self . tzname ( dt )"}
{"intent": "define the method __repr__ with an argument self.", "snippet": "def __repr__ ( self ) :"}
{"intent": "call the function force_str with an argument self._tzname, return the result.", "snippet": "return force_str ( self . _tzname )"}
{"intent": "define the method __getinitargs__ with an argument self.", "snippet": "def __getinitargs__ ( self ) :"}
{"intent": "return a tuple with an element self.__dt.", "snippet": "return self . __dt ,"}
{"intent": "define the method utcoffset with 2 arguments self and dt.", "snippet": "def utcoffset ( self , dt ) :"}
{"intent": "call the nethod self._isdst with an argument dt, if it evaluates to true,", "snippet": "if self . _isdst ( dt ) :"}
{"intent": "call the function timedelta with an argument seconds as negative time.altzone, return the result.", "snippet": "return timedelta ( seconds = - time . altzone )"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the function timedelta with an argument seconds as negative time.timezone, return the result.", "snippet": "return timedelta ( seconds = - time . timezone )"}
{"intent": "define the method dst with 2 arguments self and dt.", "snippet": "def dst ( self , dt ) :"}
{"intent": "call the nethod self._isdst with an argument dt, if it evaluates to true,", "snippet": "if self . _isdst ( dt ) :"}
{"intent": "call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,", "snippet": "return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )"}
{"intent": "to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,", "snippet": "else :"}
{"intent": "call the function timedelta with an argument integer 0, return the result.", "snippet": "return timedelta ( 0 )"}
{"intent": "define the method tzname with 2 arguments self and dt.", "snippet": "def tzname ( self , dt ) :"}
{"intent": "if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.", "snippet": "is_dst = False if dt is None else self . _isdst ( dt )"}
{"intent": "try,", "snippet": "try :"}
{"intent": "call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,", "snippet": "return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )"}
{"intent": "return the result.   if UnicodeDecodeError exception is caught,", "snippet": "except UnicodeDecodeError :"}
{"intent": "return None.", "snippet": "return None"}
{"intent": "define the method _isdst with 2 arguments self and dt.", "snippet": "def _isdst ( self , dt ) :"}
{"intent": "tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,", "snippet": "tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )"}
{"intent": "integer 0 and integer 0.   try,", "snippet": "try :"}
{"intent": "call the method time.mktime with an argument tt, substitute the result for stamp.", "snippet": "stamp = time . mktime ( tt )"}
{"intent": "if OverflowError or ValueError exceptions are caught,", "snippet": "except ( OverflowError , ValueError ) :"}
{"intent": "create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.", "snippet": "tt = ( 2037 , ) + tt [ 1 : ]"}
{"intent": "call the method time.mktime with an argument tt, substitute the result for stamp.", "snippet": "stamp = time . mktime ( tt )"}
{"intent": "call the method time.localtime with an argument stamp, substitute the result for tt.", "snippet": "tt = time . localtime ( stamp )"}
{"intent": "if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.", "snippet": "return tt . tm_isdst > 0"}
{"intent": "from __future__ import absolute_import into default name space.", "snippet": "from __future__ import absolute_import"}
{"intent": "import module warnings.", "snippet": "import warnings"}
{"intent": "from django.utils.deprecation import RemovedInDjango19Warning into default name space.", "snippet": "from django . utils . deprecation import RemovedInDjango19Warning"}
{"intent": "call the function warnings.warn with 3 arguments: string 'django.utils.unittest will be removed in Django 1.9.',", "snippet": "warnings . warn ( 'django.utils.unittest will be removed in Django 1.9.' ,  RemovedInDjango19Warning , stacklevel = 2 )"}
{"intent": "RemovedInDjango19Warning and stacklevel as integer 2.   try,", "snippet": "try :"}
{"intent": "from unittest2 import everything.", "snippet": "from unittest2 import *"}
{"intent": "if ImportError exception is caught,", "snippet": "except ImportError :"}
{"intent": "from unittest import import everything.", "snippet": "from unittest import *"}
{"intent": "from __future__ import unicode_literals into default name space.", "snippet": "from __future__ import unicode_literals"}
{"intent": "import module datetime.", "snippet": "import datetime"}
{"intent": "import module os.", "snippet": "import os"}
{"intent": "import module subprocess.", "snippet": "import subprocess"}
{"intent": "define the function get_version with version set to None as argument.", "snippet": "def get_version ( version = None ) :"}
{"intent": "call the get_complete_version function with version as argument, store the result in version.", "snippet": "version = get_complete_version ( version )"}
{"intent": "call the get_major_version wit version as argument, store the result in major.", "snippet": "major = get_major_version ( version )"}
{"intent": "sub is an empty string.", "snippet": "sub = ''"}
{"intent": "if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,", "snippet": "if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :"}
{"intent": "call the function get_git_changeset, store the result in git_changeset.", "snippet": "git_changeset = get_git_changeset ( )"}
{"intent": "if git_changeset is true,", "snippet": "if git_changeset :"}
{"intent": "convert git_changeset to string, append it to the string '.dev', replace it for sub.", "snippet": "sub = '.dev%s' % git_changeset"}
{"intent": "otherwise if fourth element of version does not equals to 'final',", "snippet": "elif version [ 3 ] != 'final' :"}
{"intent": "mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.", "snippet": "mapping = \\{ 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' \\}"}
{"intent": "use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.", "snippet": "sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )"}
{"intent": "sum major and sub, return the result converted to string.", "snippet": "return str ( major + sub )"}
{"intent": "define the function get_major_version with an argument version defaulting to None.", "snippet": "def get_major_version ( version = None ) :"}
{"intent": "call the get_complete_version with an argument version, store the result in version.", "snippet": "version = get_complete_version ( version )"}
{"intent": "assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.", "snippet": "parts = 2 if version [ 2 ] == 0 else 3"}
{"intent": "convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.", "snippet": "major = '.' . join ( str ( x ) for x in version [ : parts ] )"}
{"intent": "return major.", "snippet": "return major"}
{"intent": "define the function get_complete_version with in argument version, defaulting to None.", "snippet": "def get_complete_version ( version = None ) :"}
{"intent": "if version is None,", "snippet": "if version is None :"}
{"intent": "from django import VERSION as version into default name space.", "snippet": "from django import VERSION as version"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "if length of version does not equals to integer 5, raise an exception.", "snippet": "assert len ( version ) == 5"}
{"intent": "if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.", "snippet": "assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )"}
{"intent": "return version", "snippet": "return version"}
{"intent": "define the function get_git_changeset.", "snippet": "def get_git_changeset ( ) :"}
{"intent": "if get_git_changeset has an attribute 'cache',", "snippet": "if hasattr ( get_git_changeset , 'cache' ) :"}
{"intent": "return get_git_changeset.cache.", "snippet": "return get_git_changeset . cache"}
{"intent": "get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.", "snippet": "repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )"}
{"intent": "call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,", "snippet": "git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )"}
{"intent": "stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.", "snippet": "timestamp = git_log . communicate ( ) [ 0 ]"}
{"intent": "try", "snippet": "try :"}
{"intent": "call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.", "snippet": "timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )"}
{"intent": "if ValueError exception is caught,", "snippet": "except ValueError :"}
{"intent": "changeset is None.", "snippet": "changeset = None"}
{"intent": "if not,", "snippet": "else :"}
{"intent": "call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.", "snippet": "changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )"}
{"intent": "substitute changeset for get_git_changeset.cache.", "snippet": "get_git_changeset . cache = changeset"}
{"intent": "return changeset.", "snippet": "return changeset"}
{"intent": "from xml.sax.saxutils import XMLGenerator into default name space.", "snippet": "from xml . sax . saxutils import XMLGenerator"}
{"intent": "derive the class SimplerXMLGenerator form the XMLGenerator base class.", "snippet": "class SimplerXMLGenerator ( XMLGenerator ) :"}
{"intent": "define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.", "snippet": "def addQuickElement ( self , name , contents = None , attrs = None ) :"}
{"intent": "if attrs is None,", "snippet": "if attrs is None :"}
{"intent": "attrs is an empty dictionary.", "snippet": "attrs = \\{ \\}"}
{"intent": "cal the method self.startElement with 2 arguments: name and attrs.", "snippet": "self . startElement ( name , attrs )"}
{"intent": "if contents is not None,", "snippet": "if contents is not None :"}
{"intent": "call the method self.characters with an argument contents.", "snippet": "self . characters ( contents )"}
{"intent": "call the method self.endElement with an argument name.", "snippet": "self . endElement ( name )"}
